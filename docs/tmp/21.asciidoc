API
---

这部分包括两部分，通道 API 及构建快 API

通道 API
^^^^^^^^
这部分我们介绍构建可靠群组通信的 JGroups 类，我们主要集中于创建的使用通道。所以这些类位于 org.jgroups 包中，详细的介绍可参看 JGroups javadoc 文档。

1 工具类
++++++++
org.jgroups.util.Util 包含许多实用的的方法，我们可以使用这些方法来简化我们的代码。

*  objectToByteBuffer(), objectFromByteBuffer()
第一种方法需要一个对象作为参数，序列化到一个字节缓冲区（该对象是可序列化或实现 externalizable 接口）。字节数组，然后返回。这种方法通常用于将对象序列化为字节缓冲区的消息。第二种方法返回一个重建的对象从一个缓冲区。这两种方法都抛出一个异常，如果该对象不能被序列化和反序列化。

* objectToStream(), objectFromStream()
第一种方法需要一个对象，并将其写入到输出流。第二种方法需要输入流中读取对象。这两种方法都抛出一个异常，如果该对象不能被序列化和反序列化。

2 接口
++++++
接口被后面的一些实现使用所以我们先介绍 JGroups 通道接口。

* MessageListener
MessageListener提供接收回调消息，获取和设定群组状态，通过流的形式获取和设定状态。
----
public interface MessageListener {
    void receive(Message msg);
    void getState(OutputStream output) throws Exception;
    void setState(InputStream input) throws Exception;
}
----
当一个消息接收时 receive（）方法被调用。getState（）和 setState（）方法用来获取和设置组状态，例如有成员加入到组或有成员离开组时需要重新设定状态。

* MembershipListener
MembershipListener 接口与 MessageListener 接口类似：每当一个新的视图，怀疑消息，或块事件接收，对应的 MembershipListener 方法的实现将被调用。
----
public interface MembershipListener {
    void viewAccepted(View new_view);
    void suspect(Address suspected_mbr);
    void block();
    void unblock();
}
----
通常情况回调实现类需要实现 viewAccepted() 方法，当新的成员加入群组，或已存在的成员离开群组或已存在的成员发生异常时通知接收者。当有成员被怀疑（发生异常）时 suspect() 方法被调运。

block() 方法用来通知组成员被阻止发送消息，这个具体是 FLUSH 协议完成的，比如在群组状态转换或视图在初始化过程中调运此方法来阻止成员发送消息。当 block() 方法被调运，所以成员的线程都被阻止发送消息，直到 FLUSH 调运 unblock() 方法来释放这些线程。

unblock() 方法用来通知组成员 FLUSH 协议已经完成，成员可以发送消息。

* Receiver
----
public interface Receiver extends MessageListener, MembershipListener {
}
----
Receiver 用来处理接收消息或视图发生变化等，当有消息接收到时 receive() 方法被调运，任何时候当视图发生变化时 viewAccepted() 方法被调运。

* ReceiverAdapter
这个类实现了 Receiver 接口，所有实现方法为空，应用方法如果想实现回调我们需要继承 ReceiverAdapter，重写相关方法，通常我们实现receive() 方法和 viewAccepted() 方法。ReceiverAdapter 明细如下;
----
public class ReceiverAdapter implements Receiver {
	public void receive(Message msg) {}
	public void getState(OutputStream output) throws Exception {}
	public void setState(InputStream input) throws Exception {}
	public void viewAccepted(View view) {}
	public void suspect(Address mbr) {}
	public void block() {}
	public void unblock() {}
}
----

* ChannelListener
----
public interface ChannelListener {
	void channelConnected(Channel channel);
	void channelDisconnected(Channel channel);
	void channelClosed(Channel channel);
}
----
一个类实现 ChannelListener 可以使用 Channel.addChannelListener（）方法来注册获来获取通道状态的变化信息。当一个通道被关闭，断开或开启，相应的方法会被调用。 

3 Address
++++++++++
一个群组中的每个成员都有一个地址，它唯一标识成员。抽象这样的地址的接口是 Address，该地址需要具体的实现比较，排序等相关接口，JGroups的地址必须实现以下接口：
----
public interface Address extends Streamable, Comparable<Address>, Externalizable{
int size();
} 
----
为了序列化及反序列化方便，size() 方法需要返回的地址实现的一个实例序列化形式占用的字节数。不要使用直接实现 Address，Address 作为一个不透明的集群节点的标识符！

实际上 Address 的实现需要依赖底层的通信协议（例如，UDP或TCP），这允许被使用的JGroups为所有可能的各种地址。由于一个地址唯一的标识一个通道，群组中的成员也是通过地址来发送消息到组中其他成员。

Address 的默认实现是 org.jgroups.util.UUID，它唯一标识节点，断开并重新连接到群集时，一个节点被赋予了新的 UUID。UUID 是不会直接显示出来，但通常显示为一个逻辑名称（之后会消息介绍逻辑名称）。这个名字可以通过用户或 JGroups，其唯一的目的是为了使日志输出的更具可读性。UUID 映射到 IP 地址和端口号，这些最终被传输协议用来来发送消息。

4 Message
+++++++++
群组中成员之间以消息（org.jgroups.Message）的形式发送数据。一个成员可以发送一条消息给群组中的一个成员，也将这条消息发送给群组中的所有成员，群组中的所以成员共享一个通道。如下图为消息的结构示意图：

image::img/2-1.png[消息结构图]

一条消息可以分为五个部分：

* 目的地址
接收机的地址。如果为空，该消息将被发送到所有当前的组成员。Message.getDest（）返回消息的目的地地址。

* 源地址
发送者的地址。可以保留为空，如果为空，该字段将会由传输协议（如UDP）在将消息发送到网络上之前填写。

* 标志符
大小为一个字节。目前可识别的标志符有 OOB，DONT_BUNDLE，NO_FC，NO_RELIABILITY，NO_TOTAL_ORDER，NO_RELAY 和 RSVP。稍候我们将会做详细的讨论。

* 有效负载
实际的数据（以字节缓冲区的形式）。Message类包含方便的方法来设置一个序列化的对象，并检索了一遍，使用序列化将对象转换到/从一个字节缓冲区。如果缓冲区的子范围较大的缓冲区，一个消息会有一个偏移量和长度。

* 消息头
可以有一个队列的消息有连接到一个消息，任何不能够在有效负载中的信息可以作为消息头。方法putHeader（），getHeader（）和removeHeader（）的消息可以用于操纵控制消息头。需要声明，消息头是内部协议实现时做封装调运，应用程序代码不能够添加或删除消息头。

一条消息，是类似的一个IP包的有效载荷（一个字节缓冲器）和发送者和接收者（如地址）的地址组成。可以把网络上的任何消息路由到其目的地（接收地址），反馈消息可以返回到发送者的地址。

一条消息，通常并不需要填写发件人的地址发送邮件时，这是由协议栈将消息发送到网络上之前自动完成的。然而，可能存在这样的情况，当该消息的发送者希望得到一个从它自己的不同的地址，例如反馈消息发送到其他成员。

目标地址（接收器）可以是一个地址，表示一个成员的地址，例如确定从收到的消息，也可以是空的，这意味着该消息将被发送到该组的所有成员。一个典型的多播消息，发送字符串“Hello”的所有成员将看起来像这样：
----
Message msg=new Message(null, "Hello");
channel.send(msg);
----

5 Header
++++++++
如上消息头是一个自定义的一个字节大小的信息，可以被添加到每个消息。JGroups的广泛使用消息头，例如添加序列号到每个消息（NAKACK 和 UNICAST），因此这些消息可以按照顺序发送。

6 Event
+++++++
事件使 JGroups 协议栈之间可以相互交换信息，相比较消息，消息是群组中成员通过网络传输，而时间是在协议栈中由上到下或由下到上传输。

NOTE: 消息头和时间都是被 JGroups 内部协议栈使用，外部应用程序不能够调运这些接口。

7 View
++++++
视图（org.jgroups.View）是一个群组中所有成员的列表。它由一个唯一标识自己的 ViewId 和所有成员的列表组成。每当有新的成员加入或现有的叶子（或崩溃），视图就会被通道下层的协议栈自动重新安装。一个群组中的所有成员看到的视图是相同的。

需要注意，视图中的第一个成员是协调者，因此群组中的成员可以很容易找到协调者而不需要与其他成员交互信息，任何情况视图中的第一个成员被认为是协调者。

下面的代码显示了如何发送（单播）消息给视图中的第一个成员：
----
View view = channel.getView();
Address first = view.getMembers().get(0);
Message msg = new Message(first, "Hello world");
channel.send(msg);
---- 

* ViewId
ViewId 是用来唯一标识视图，它包括的视图创建者的地址和一个序列号，ViewId 可以比较大小（实现了 equals（）和hashCode（））使用 HashMap 来保存。

* MergeView
每当一组分裂成子类，例如由于网络分区，后面的子群合并到一起，这种情况一个 MergeView 代替 View 将被应用程序使用。MergeView 是 View 的一个子类，包含一些视图合并所需的变量，例如，视图 V1:(p,q,r,s,t) 分裂成 V2:（p,q,r）和 V2:（s,t），合并的视图可能是 V3:（p,q,r,s,t) ，在这种情况下 MergeView 包含变量 V2:（p,q,r）和 V2:（s,t）。

8 JChannel
++++++++++
一个应用成员为了加入一个群组发送消息，首先它需要创建一个通道。通道是像一个插座。当客户端连接到一个通道，它给它想加入的群组一个名称。因此，通道（在其连接状态）总是与一个特定的组相关联。协议栈同样需要这个组的名字来找到彼此：当一个客户端连接到一个通道给定组的名称为 G，接着它会尝试找到具有相同名称的现有通道，并加入他们，这样一个新的视图是被安装（包含新的成员）。如果没有成员的存在，将创建一个新的组。

下图为通道主要状态变化示意图：

image::img/2-2.png[通道主要状态]


