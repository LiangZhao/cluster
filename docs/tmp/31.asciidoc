JBoss Cache 简介
----------------
这部分的主要目的是介​绍​JBossCache​基​本​概​念​、​API、​配​置​和部​署，是用户或开发人员能够在​其​项​目​中​快​速​开​始​使​用​JBossCache

1 概 ​述
+++++++

* 1.1 什么是 JBoss Cache?

JBoss Cache 是一个树型结构的群集事务性缓存。它可以用于独立的、非群集的环境里以缓存内存里被频繁访问的数据,在提供企业级功能如 JTA 兼容性、逐出和持久化的同时消除了数据提取或计算的瓶颈。

JBoss Cache 也是一个群集缓存，它在群集里复制状态，从而提供高度的失效切换。它支持不同的复制模式，包括失效和 Buddy 复制，其网络通讯既可以是同步也可以是异步的。

当用于群集模式时，它是在自定义应用程序和框架里构建高可用性、容错和负载平衡的有效机制。例如 JBoss 应用服务器在群集服务(如 HTTP 和 EJB 会话)里广泛使用 JBoss Cache，并为 JPA 提供了分布式的实体缓存。

JBoss Cache 要求 Java 5.0(或更新版本)兼容的虚拟机和库，除了 Java 5.0 以外，JBoss Cache 最少还需要 JGroups 和 Apache 的 commons-logging。JBoss Cache 附带开箱即用所需的所有依赖库，以及用于可选功能的几个 JAR 文件。

* 1.1.1. 什么是 POJO Cache?

POJO Cache 是核心 JBoss Cache API 的扩展。POJO Cache 提供如下的额外功能:

. 即使在复制或持久化后仍维护对象引用
. 细颗粒度的复制，只复制有改动的对象字段
. "API-less" 群集模型，POJO 简单地注解为群集


* 1.2. 功能总结

* 1.2.1. 缓存对象 

JBoss Cache 提供一个简单和直观的 API，数据 - 简单的 Java 对象都可以置于缓存里。基于所选的配置选项，这个数据可以是下面的其中一个或全部:

. 缓存到内存里以供高效的、线程安全的访问
. 复制到群集里某些或全部的缓存实例里
. 持久化到磁盘和/或远程的内存缓存群集("far-cache")
. 当空闲内存过低时进行垃圾收集，并钝化到磁盘以保存状态。

此外，JBoss Cache 提供一系列丰富的企业级功能:

. 能够参与 JT A 事务(和大多数 Java EE 兼容的事务管理者一起工作)
. 连接至 JMX 控制台并提供缓存状态的运行时统计信息
. 允许客户代码附加 listener 并接收缓存事件的通知
. 为了高效地复制，允许缓存操作分组至批次

* 1.2.2 本地和群集模式

缓存按树型结构组织，具有唯一的根。树里的每个节点基本上都包含一个表以存储键/值对。对缓存对象的唯一要求是它们必须实现 java.io.Serializable。

JBoss Cache 可以是本地的，也可以是复制性的。本地树只存在创建它们的 Java 虚拟机里，而复制性树则把任何修改传递到同一群集里的其他复制性树中。​群​集​可​以​跨​越​网​络​里​的​多​个​主​机​或​者​是​单​个​主​机​里​的​不​同虚​拟​机​。

* 1.2.3 群集缓存和事务

当缓存里的对象出现修改并发生在事务的上下文里时，我们会把对修改的复制推迟，直到事务成功提交。所有的修改都保存在一个和调用者使用的事务相关的列表里。当这个事务提交时，我们将进行复制。否则(如回滚时)，我们只是简单地在本地取消修改并释放任何锁，这样就不会有复制相关的通讯和开销。例如，如果调用者进行了 100 个修改然后回滚事务，我们不会复制任何数据，从而不会增加任何网络负载。

如果调用者没有使用事务或者没有批次与之关联，我们将在每次修改后马上复制，例如，在上面的例子里，我们将发送 100 条消息，加上一条关于回滚的额外消息。这样，不带事务的运行可以被认为和 JDBC 术语里的启用自动提交类似，此时的操作都会被自动提交。

JBoss Cache 不做任何修改即可与多数流行的事务管理者一起使用，它甚至提供编写自定义事务管理者的 API。

上面的内容对于批次也适用，它具有类似的行为

* 1.2.4 线程的安全性 

JBoss Cache 是完全地线程安全的。它使用了多重版本并行控制(multi-versioned concurrency control，MVCC)来确保读取者和写入者间的线程安全性，同时保持着高度的并行性。JBoss Cache 里使用的专有 MVCC 实现运行读取者线程完全独立于锁和同步阻塞，确保了多读应用程序的高性能。JBoss Cache 也使用自定义的、高性能的锁实现，它将现代的 compare-and-swap 技术应用于写入者线程，从而为多核 CPU 架构进行了优化。

多重版本并行控制(multi-versioned concurrency control，MVCC)是 JBoss Cache 3.x 之后版本的缺省锁模式。旧版本的乐观和悲观的锁模式仍然可用，但会被 MVCC 所替代，以后也会从新版本里删除，不鼓励使用这些已取消的锁模式。

JBoss Cache 的 MVCC 实现只支持 READ_COMMITTED 和 REPEATABLE_READ 隔离级别，分别对应其数据库里的级别。关于 MVCC 的详情我将在后面介绍。


2. User API
+++++++++++

* 2.1. API 类

Cache 接口是和 JBoss Cache 交互的主要机制。它是用 CacheFactory 构建并可选择地启动的。CacheFactory 允许你从 Configuration 对象或 XML 文件创建 Cache。缓存将数据组织到由节点组成的树型结构里。一旦你具有了到 Cache 的引用，你可以用它来在树型结构里查找 Node 对象，并存储数据。

image::img/3-1.png[Figure 3.1]

请注意，上面的图表只是描述了一些流行的 API 方法。阅读上述接口的 Javadoc 是学习 API 的最近途径。

* 2.2. 初始化和启动缓存 

Cache 接口的实例只能通过 CacheFactory 创建。这和 JBoss Cache 1.x 不同，旧的 TreeCache 可以直接初始化。

CacheFactory 提供了用于创建 Cache 的大量重载方法，但它们基本上都是做的同一件事情:

. 获取对 Configuration 的访问, 或者是作为方法参数传入或通过解析 XML 内容并进行构建。XML 内容可以来自输入流、classpath 或文件系统位置。关于获取 Configuration 的更多信息随后将会有详细描述。
. 初始化 Cache 并为其提供一个对 Configuration 的引用
. 可选择地调用缓存的 create() 和 start() 方法

下面的代码段例子是使用缺省配置值创建和启动缓存的最简单机制:
----
CacheFactory factory = new DefaultCacheFactory();

Cache cache = factory.createCache();
----

在这个例子里, 我们告诉 CacheFactory 来查找并解析 classpath 上的配置文件:
----
CacheFactory factory = new DefaultCacheFactory();

Cache cache = factory.createCache("cache-configuration.xml");
----

在这个例子里, 我们通过文件配置缓存, 但希望通过程序修改配置元素。所以, 我们通知工厂不要启动缓存, 而是自己来启动:
----
CacheFactory factory = new DefaultCacheFactory();
Cache cache = factory.createCache("/opt/configurations/cache-configuration.xml",false);
Configuration config = cache.getConfiguration();
config.setClusterName(this.getClusterName());
// Have to create and start cache before using it
cache.create();
cache.start();
----

* 2.3. 缓存和获取数据

然后, 让我们使用 Cache API 来访问缓存里的 Node 然后对这个节点做一些简单的读和写。
----
 28     Cache cache = createCacheUseDefault();
 29     Node rootNode = cache.getRoot();
 30     Fqn helloWorldFqn = Fqn.fromString("/root/helloWorld");
 31     Node helloWorld = rootNode.addChild(helloWorldFqn);
 32     helloWorld.put("isJBossCache", Boolean.TRUE);
 33     helloWorld.put("content", new Content("HelloWorld"));
 34 
 35     System.out.println(helloWorld.get("isJBossCache"));
 36     System.out.println(helloWorld.get("content"));
 37     System.out.println(helloWorld.getFqn());
 38     System.out.println(helloWorld.getKeys());
 39 
 40     helloWorld.remove("isJBossCache");
 41     helloWorld.remove("content");
 42 
 43     System.out.println(helloWorld.get("isJBossCache"));
 44     System.out.println(helloWorld.get("content"));
 45 
 46     rootNode.removeChild(helloWorldFqn);
----
如上 28-29 行创建默认 Cach 后获取一个跟节点； 30 行 JBoss Cache 用树状的结构存储数据，树状结构包含多个节点，所有节点都用 Fqn 来识别； 31-33 行创建一个新节点，并向该节点存储数据； 35-38 行测试读取存储的数据； 40-41 行移除添加的数据； 46 行将新创建的节点从跟节点移除。

为了便于使用, Cache 接口也开放以 “Fqn 类” 作为参数执行 put/get/remove 操作​:
----
Cache cache = createCacheUseDefault();
Node rootNode = cache.getRoot();
Fqn helloWorldFqn = Fqn.fromString("/root/helloWorld");
Node helloWorld = rootNode.addChild(helloWorldFqn);
		
cache.put(helloWorldFqn, "isJBossCache", Boolean.TRUE);
cache.put(helloWorldFqn, "content", new Content("HelloWorld"));
		
System.out.println(helloWorld.get("isJBossCache"));
System.out.println(helloWorld.get("content"));
System.out.println(cache.getRoot().hasChild(helloWorldFqn));
		
cache.removeNode(helloWorldFqn);
----

* 2.3.1 组织数据并使用节点结构
  
节点应该被看作一个命名逻辑数据组。节点应该用来包含单个数据记录里的数据, 例如, 某个人或帐号的信息。它应该具有缓存的所有方面 - 锁、缓存加载、复制和逐出 - 对于每个节点设置。因此, 存储在单个节点里任何分组信息都将被当作单个的原子单元。

* 2.4. Fqn 类

前面的部分在其示例里使用了 Fqn 类; 现在让我们对其进行进一步的了解。

Fully Qualified Name (Fqn) 封装了代表对应缓存树型机构里某个位置的路径的名称列表。该列表里的元素通常是 String 但也可以是任何 Object 或混合类型。 Fqn 代表一个到特定节点的路径或 Cache 中的路径。

这个路径可以是绝对的(也就是相对于根节点)，也可以相对于缓存里的任何节点。关于使用 Fqn 的 API 调用的文档里会告诉你该 API 是否使用相对还是绝对的 Fqn。

Fqn 提供了大量的工厂方法，详情请参考 Javadoc。下面的例子解释了创建 FQN 最常用的途径:
----
15    Fqn strFqn = Fqn.fromString("/people/Smith/Joe/");
16    Fqn eleDqn = Fqn.fromElements("accounts", "NY", new Integer(12345));
----
如上 15 行我们创建一个 Fqn 指向节点 Joe，节点 Joe 在父节点 Smith 下，而 节点 Smith 位于节点 people 下，我们通过 String 字符串创建 Fqn； 16 行我们用其他的数据类型来创建 Fqn。

NOTE: Fqn.fromElements("a", "b", "c") 与 Fqn.fromString("/a/b/c") 的等效的，它们都是创建了一个指向节点 c 的 Fqn。

* 2.5. 停止和销毁缓存

使用完毕后停止并销毁缓存是一个好的做法，特别是在群集缓存并加上对 JGroups 频道的使用的情况下。停止并销毁缓存确保了能够正确地清理网络套接字和维护线程等资源。
----
cache.stop();
cache.destroy();
----

NOTE: 已调用 stop() 的缓存可以用 start() 重启启动。类似地，已调用 destroy() 的缓存也可以用 create() 重新创建(并可用 start() 调用重启启动)。

* 2.6. 缓存模式 

虽然从技术上来说并非 API 的一部分，但缓存所操作的模式可影响到任何 put 或 remove 操作的行为，所以在这里我们将简单的描述出这些模式。

JBoss Cache 模式是通过 org.jboss.cache.config.Configuration.CacheMode 枚举的。它们是:

. LOCAL - 本地的、非群集的缓存模式。本地缓存不加入群集也不和群集里的其他节点通讯。
. REPL_SYNC - 同步模式。缓存复制群集里其他缓存的修改。同步复制意味着修改被复制且调用者阻塞，直至接收到复制确认。
. REPL_ASYNC - 异步模式。和上面的 REPL_SYNC 类似，缓存复制群集里其他缓存的修改。但调用者不会阻塞到接收到复制确认为止。
. INVALIDATION_SYNC - 非验证同步模式。如果缓存被配置为失效而不是复制，每次数据有修改时，群集里的其他缓存将收到一条消息来通知它们这个数据已经陈旧且应该从缓存逐出。这样做减少了复制负载，同时还可以使远程缓存里的陈旧数据失效。
. INVALIDATION_ASYNC - 非验证异步模式。和上面的一样，除了这个失效模式会导致失效信息的异步广播。

* 2.7. 添加缓存 Listener - 注册缓存事件

JBoss Cache 提供一个方便的机制以注册缓存事件的通知​。
----
Object myListener = new MyCacheListener();
cache.addCacheListener(myListener);
----

删除或查询注册的 listener 也有类似的方法。详情请参考 Cache 接口的 Javadoc。

如果用 @CacheListener 进行注解，基本上任何的公用类都可用作 listener。此外，类的一个或多个方法需要进行方法级别的注解(在 org.jboss.cache.notifications.annotation 软件包里)。被注解方法需要是 public 的，并具有 void 返回类型，还得接受 org.jboss.cache.notifications.event.Event 类型或其子类型为唯一的参数。

. @CacheStarted - 注解方法以在缓存启动时接收通知。这些方法需要接受一个属于 CacheStartedEvent 的参数类型。
. @CacheStopped - 注解方法以在缓存停止时接收通知。这些方法需要接受一个属于 CacheStoppedEvent 的参数类型。
. @NodeCreated - 注解方法以在节点创建时接收通知。这些方法需要接受一个属于 NodeCreatedEvent 的参数类型。
. @NodeRemoved - 注解方法以在删除节点时接收通知。这些方法需要接受一个属于 NodeRemovedEvent 的参数类型。
. @NodeModified - 注解方法以在修改节点时接收通知。这些方法需要接受一个属于 NodeModifiedEvent 的参数类型。
. @NodeMoved - 注解方法以在移动节点时接收通知。这些方法需要接受一个属于 NodeMovedEvent 的参数类型。
. @NodeVisited - 注解方法以在访问节点时接收通知。这些方法需要接受一个属于 NodeVisitedEvent 的参数类型。
. @NodeLoaded - 注解方法以在从 CacheLoader 里加载节点时接收通知。这些方法需要接受一个属于 NodeLoadedEvent 的参数类型。
. @NodeEvicted - 注解方法以在节点从内存里逐出时接收通知。这些方法需要接受一个属于 NodeEvictedEvent 的参数类型。
. @NodeInvalidated - 注解方法以在节点由于远程失效事件从内存里逐出时接收通知。这些方法需要接受一个属于 NodeInvalidatedEvent 的参数类型。
. @NodeActivated - 注解方法以在节点被激活时接收通知。这些方法需要接受一个属于 NodeActivatedEvent 的参数类型。
. @NodePassivated - 注解方法以在节点被钝化时接收通知。这些方法需要接受一个属于 NodePassivatedEvent 的参数类型。
. @TransactionRegistered - 注解方法以在缓存在已注册的事务管理者里注册 javax.transaction.Synchronization 时接收通知。这些方法需要接受一个属于 TransactionRegisteredEvent 的参数类型。
. @TransactionCom pleted - 注解方法以在缓存从已注册的事务管理者接收提交或回滚调用时接收通知。这些方法需要接受一个属于 TransactionCompletedEvent 的参数类型。
. @ViewChanged - 注解方法以在群集的组结构改变时接收通知。这些方法需要接受一个属于 ViewChangedEvent 的参数类型。
. @CacheBlocked - 注解方法以在缓存操作因为状态转换事件而阻塞时接收通知。这些方法需要接受一个属于 CacheBlockedEvent 的参数类型。
. @CacheUnblocked - 注解方法以在缓存操作因为状态转换事件而取消阻塞时接收通知。这些方法需要接受一个属于 CacheUnblockedEvent 的参数类型。
. @BuddyGroupChanged - 注解方法以在节点由于 Buddy 放弃群集或更新、更近的 Buddy 加入而修改其 Buddy 组时接收通知。这些方法需要接受一个属于 BuddyGroupChangedEvent 的参数类型。

请参考 Javadocs 了关于注解和 Event 子类型的内容，如传入方法里的参数是什么、何时传入等。

----
14 @CacheListener
15 public class MyListener {
16 
17         @CacheStarted
18         @CacheStopped
19         public void cacheStartStopEvent(Event e) {
20                 switch (e.getType()) {
21                 case CACHE_STARTED:
22                         System.out.println("Cache has started");
23                         break;
24                 case CACHE_STOPPED:
25                         System.out.println("Cache has stopped");
26                         break;
27                 }
28         }
29 
30         @NodeCreated
31         @NodeRemoved
32         @NodeVisited
33         @NodeModified
34         @NodeMoved
35         public void logNodeEvent(NodeEvent e) {
36                 System.out.println(e.getType() + " on node " + e.getFqn() + " has occured");
37         }
38 
39 }
----

如上 17-18 行在缓存启动或停止时 cacheStartStopEvent（）方法被调运，根据事件的类型打印输出相关提示信息；第 30-34 行在节点被创建，移除，访问，移动是 logNodeEvent（）方法被调运，详细的事件类型被打印输出。我们用如下代码端测试 MyListener：

----
13     CacheFactory factory = new DefaultCacheFactory();
14     Cache cache = factory.createCache(false);
15     MyListener myListener = new MyListener();
16     cache.addCacheListener(myListener);
17     cache.start();
18 
19     Node root = cache.getRoot();
20     Fqn abcFqn = Fqn.fromString("/a/b/c");
21     Node abc = root.addChild(abcFqn);
22     abc.put("content", new Content("abc test"));
23     abc.get("content");
24     cache.removeNode(abcFqn);
25     cache.stop();
26      cache.destroy();
----
如上 13-14 行使用 DefaultCacheFactory 创建一个 Cache； 15-16 行注册缓存事件； 17 行启动 Cache； 19-23 行创建 abc 节点，并向该节点添加，查取，删除数据； 24-26 行移除节点，关闭 Cache，运行该代码端输出结果如下：

----
Cache has started
NODE_CREATED on node /a has occured
NODE_CREATED on node /a has occured
NODE_CREATED on node /a/b has occured
NODE_CREATED on node /a/b has occured
NODE_CREATED on node /a/b/c has occured
NODE_CREATED on node /a/b/c has occured
NODE_MODIFIED on node /a/b/c has occured
NODE_MODIFIED on node /a/b/c has occured
NODE_MODIFIED on node /a/b/c has occured
NODE_MODIFIED on node /a/b/c has occured
NODE_VISITED on node /a/b/c has occured
NODE_VISITED on node /a/b/c has occured
NODE_REMOVED on node /a/b/c has occured
NODE_REMOVED on node /a/b/c has occured
Cache has stopped
----


* 2.7.1. 同步和异步通知
  在缺省情况下，所有的通知都是同步的，因此它们在产生事件的调用者线程里发生。确保缓存 listener 实现不会占用需长时间运行的任务中的线程是一个好的办法。或者，你可以设置 CacheListener.sync 属性为 false，此时你不会在调用者线程里得到通知。

* 2.8 用缓存加载器

  缓​存​加​载​器​是​ JBoss Cache 的​重​要​组​成​部​分​。​它​们​允​许​节​点​持​久​化​到​磁​盘​或​远​程​缓​存​群​集​里​,而​且​允​许​在缓​存​用​尽​内​存​时​进​行​钝​化​。​此​外​,缓​存​加​载​器​允​许​ JBoss Cache 执​行​“​warm starts”​,此​时​的​内​存​状​态​可​以从​持​久​性​存​储​中​预​加​载​。​JBoss Cache 附​带​了​大​量​的​缓​存​加​载​器​实​现​。

. org.jboss.cache.loader.FileCacheLoader - 是​一​个​基​本​的​、​基​于​文​件​系​统​的​缓​存​加​载​器​,它将​数​据​持​久​化​到​磁​盘​。​它​是​非​事​务​性​的​,而​且​性​能​一​般​,单​确​实​非​常​简​单​的​方​案​。​它​主​要​用​于​测​试​,不​推​荐​将​其​用​在​产​品​环​境​中​。
. org.jboss.cache.loader.JDBCCacheLoader - 它​使​用​ JDBC 连​接​来​存​储​状​态​。​连​接​可​从​一​个内​部​池​(使​用​ c3p0 pooling 库​)或​配​置​好​的​数​据​源​里​创​建​并​维​护​。​这​个​缓​存​加​载​器​连​接​的​数​据​库​可​以​是本​地​的​,也​可​以​是​远​程​的​。
. org.jboss.cache.loader.BdbjeCacheLoader - 它​使​用​ Oracle 的​基​于​文​件​的​ BerkeleyDB 事务​性​数​据​库​来​持​久​化​数​据​。​它​是​事​务​性​的​,而​且​性​能​非​常​好​,但​可​能​具​有​受​限​的​许​可​证​。
. org.jboss.cache.loader.Jdbm CacheLoader - BerkeleyDB 的​开​源​替​代​方​案​。
. org.jboss.cache.loader.tcp.T cpCacheLoader - 通​过​『​一​种​ "far cache" 模​式​』​使​用​ TCP 套​接​字​来​“​持​久​化​”​数​据​到​远​程​群​集​里​。
. org.jboss.cache.loader.ClusteredCacheLoader - 用​作​“​只​读​”​缓​存​加​载​器​,此​时​群​集​里​的​其他​节​点​按​状​态​查​询​。​当​完​整​状​态​转​移​的​代​价​过​高​时​,它​就​是​首​选​的​,此​时​状​态​是​ lazy 加​载​的​。

* 2.9 使用逐出策略(Eviction Policy)

  逐​出​策​略​是​缓​存​加​载​器​的​对​应​物​。​要​确​保​缓​存​在​填​充​时​不​会​用​尽​内​存​,使​用​逐​出​策​略​是​必​要​的​。​在​独​立​线​程里​运​行​的​逐​出​算​法​逐​出​内​存​状​态​并​释​放​内​存​。​如​果​配​有​缓​存​加​载​器​,在​需​要​时​状​态​可​以​从​缓​存​加​载​器​里​获​得。

  逐​出​策​略​可​对​每​个​区​进​行​配​置​,所​以​缓​存​里​不​同​的​子​树​可​以​有​不​同​的​逐​出​首​选​项​。​JBoss Cache 附​带​几​个​注册​策​略​:

. org.jboss.cache.eviction.LRUPolicy - 当​到​达​极​限​时​逐​出​最​近​最​少​使​用​的​节​点​。
. org.jboss.cache.eviction.LFUPolicy - 当​到​达​极​限​时​逐​出​最​不​经​常​使​用​的​节​点​。
. org.jboss.cache.eviction.MRUPolicy - 当​到​达​极​限​时​逐​出​最​近​使​用​最​多​的​节​点​。
. org.jboss.cache.eviction.FIFOPolicy - 当​到​达​极​限​时​按​照​先​入​先​出​顺​序​逐​出​节​点​。
. org.jboss.cache.eviction.ExpirationPolicy - 基​于​每​个​节​点​配​置​的​过​期​时​间​逐​出​节​点​的​策略​。
. org.jboss.cache.eviction.Elem entSizePolicy - 根​据​节​点​保​持​的​键​/值​数​量​选​择​节​点​逐​出​的策​略​。


3. 配置
+++++++

* 3.1 配置概述

  org.jboss.cache.config.Configuration 类​(及​其​第 3.3 节 “Configuration 对​象​的​构​成​”)是​封​装​了​ Cache 及​其​所​有​构​架​元​素​(类​加​载​器​、​逐​出​策​略​等​)的​ Java Bean。

  Configuration 开​放​了​大​量​的​属​性​,本​书​的​后​续​章​节​里​讨​论​的内​容​对​此​进​行​了​总​结​。​每​当​你​看​到​本​书​里​讨​论​的​配​置​选​项​,你​可​以​假​设​ Configuration 类​或​其​组​件​部​分为​该​配​置​选​项​开​放​了​简​单​的​属​性​ setter/getter 方​法​。

* 3.2. 创​建​ Configuration

  如之前我们所​讨​论​的​,在​可​以​创​建​ Cache 之​前​,必​须​提​供​ CacheFactory 以及​ Configuration 对​象​或​文​件​名​称​或​输​入​流​以​从​ XML 里​解​析​ Configuration。​下​面​我们​讨​论​了​如何​来​实​现​这​一​点​。

* 3.2.1 解​析​基​于​XML的​配​置​文​件

  配​置​ JBoss Cache 最​简​单​的​方​法​是​通​过​一​个​ XML 文​件​。​JBoss Cache 附​带​大​量​的​用​于​常​见​用​例​的​配​置​文件​。​我​们​推​荐​将​这​些​文​件​用​作​起​点​参​考​,并​进​行​调​整​以​满​足​特​殊​的​需​要​。

  下​面​是​一​个​最​简​单​的​ XML 配​置​文​件​,它​配​置​缓​存​以​本​地​(LOCAL)模​式​运​行​:
----
<?xml version="1.0" encoding="UTF-8"?>
<jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1">
</jbosscache>
----

  对​于​隔​离​级​别​、​锁​获​取​超​时​、​锁​模​式​等​这​个​文​件​使​用​缺​省​值​。​本​书​的​『​第 12.1 节 “XML 配​置​文​件​示​例​”』​以及​『​第 12.2 节 “配​置​文​件​快​速​引​用​”』​章​节​里​包​括​的​另​外​一​个​更​完​整​的​ XML 文​件​解​释​了​不​同​的​选​项​。

* 3.2.2 检​验​配​置文​件 

  在​缺​省​情​况​下​,JBoss Cache 将​根​据​ XML 模​式​检​验​你​的​ XML 文​件​,如​果​配​置​无​效​则​抛​出​异​常​。​这​可​以​通​过-Djbosscache.config.validate=false JVM 参​数​覆​盖​。​或​者​,你​可​以​用​ -Djbosscache.config.schem aLocation=url 参​数​定​自​己​的​模​式​来​进​行​检​验​。

  而​在​缺​省​情​况​下​,配​置​文​件​是​根​据​ JBoss Cache 配​置​模​式​进​行​检​验​的​,它​位​于​ jbosscache-core.jar 或​ http://www.jboss.org/jbosscache/jbosscache-config-3.0.xsd 上​。​大​多​数​的​ XML 编​辑工​具​可​以​和​这​个​模​式​一​起​使​用​以​确​保​你​创​建​的​配​置​文​件​是​正​确​且​有​效​的​。

* 3.2.3 通​过​程​序​配​置

  除​了​上​面​的​基​于​ XML 配​置​外​, Configuration 也​可​以​使​用​ Configuration 和​其​组​件​开​放​的​简​单​属​性在​程​序​里​进​行​构​建​。​在​进​行​构​建​时​,Configuration 对​象​和​ JBoss Cache 缺​省​值​一​起​出​现​,甚​至​可​用​作快​速​启​动​配​置​。

----
Configuration config = new Configuration();
config.setTransactionManagerLookupClass(
GenericTransactionManagerLookup.class.getName()
);
config.setIsolationLevel(IsolationLevel.READ_COMMITTED);
config.setCacheMode(CacheMode.LOCAL);
config.setLockAcquisitionTimeout(15000);
CacheFactory factory = new DefaultCacheFactory();
Cache cache = factory.createCache(config);
----

  甚​至​上​面​相​当​简​单​的​配​置​也​是​乏​味​的​编​程​; 因​此​使​用​基​于​ XML 配​置​是​首​选​的​办​法​。​然​而​,如​果​你​的​应​用​程序​需​要​它​, 那​没​有​理​由​对​大​部​分​属​性​不​使​用​基​于​ XML 配​置​, 然​后​访​问​ Configuration 对​象​在​程​序​里​修​改一​些​缺​省​值​、​添​加​逐​出​域​等​。

  请​注​意​,当​缓​存​在​运​行​时​,配​置​值​可​能​无​法​在​程​序​里​修​改​, 除​了​注​解​为​ @Dynamic 的​配​置​。​动​态​属​性​也​在『​第 12.2 节 “配​置​文​件​快​速​引​用​”』​表​里​进​行​标​注​。​试​图​修​改​非​动​态​属​性​将​导​致ConfigurationException。

* 3.3 Configuration 对​象​的​构​成

  Configuration 由​大​量​的​子​对​象​构​成​:

  Figure 3.2

  下​面​是​ Configuration 组​件​的​简​单​概​述​。​关​于​和​每​个​组​件​相​关​的​配​置​的​详​细​解​释​,请​参​考​ Javadoc 和​本书​相​关​的​章​节​。
. Configuration: 层​次​结​构​里​的​顶​层​对​象​; 它​开​放​本​书​『​第 12.2 节 “配​置​文​件​快​速​引​用​”』​章​节​里​列​出详细的​配​置​属​性​。
. BuddyReplicationConfig: 仅​当​使​用​『​第 8.1.2.2 节 “Buddy 复​制​”』​时​才​相​关​。​它​是​常​用​的​复​制​配置​选​项​。​它​必​须​包​括​:
.. BuddyLocatorConfig: 用​于​ BuddyLocator 实​现​的​专​有​配​置​对​象​。​开​放​哪​些​配​置​元​素​取​决​于 BuddyLocator 实​现​的​需​要​。
. EvictionConfig: 只​在​使​用​『​第 10 章 逐出(Eviction)』​时​才​相​关​。​它​是​常​用​的​逐​出​配​置​选​项​。​它必​须​包​含​至​少​一​个​下​面​的​元​素​:
.. EvictionRegionConfig: 每​个​逐​出​区​具​有​一​个​;它​为​区​命​名​。​它​必​须​包​括​:
... EvictionAlgorithmConfig: 用​于​所​使​用​的​ EvictionAlgorithm 实​现​的​专​有​配​置​对​象​。​开​放​哪些​配​置​元​素​取​决​于​ EvictionAlgorithm 实​现​的​需​要​。
. CacheLoaderConfig: 只​有​使​用​『​第 9 章 缓存加载器​』​时​才​相​关​。​它​是​通​用​的​缓​存​加​载​器​配​置​选​项。​它​必​须​包​括​至​少​一​个​下​面​的​配​置​:
.. IndividualCacheLoaderConfig: 用​于​所​使​用​的​ CacheLoader 实​现​的​专​有​配​置​对​象​。​开​放​哪​些配​置​元​素​取​决​于​ CacheLoader 实​现​的​需​要​。
. RuntimeConfig:向​缓​存​客​户​开​放​关​于​运​行​环​境​(使​用​『​xref linkend="br" />』​时​ Buddy 复​制​组​里​的成​员​资​格​)的​信​息​。​它​也​允​许​对​所​需​的​外​部​服​务​如​ JTA TransactionManager 或​ JGroups ChannelFactory 的​缓​存​进​行​直​接​注​入​。

* 3.4 动态重配置

  当​缓​存​在​运​行​时​,你​可​以​动​态​地​修​改​ some 选​项​的​配​置​:通​过​程​序​从​运​行​中​的​缓​存​里​获​得 Configuration 对​象​并​修​改​如​下​值​:
----
Configuration liveConfig = cache.getConfiguration();
liveConfig.setLockAcquisitionTimeout(2000);
----

 『​第 12.2 节 “配​置​文​件​快​速​引​用​”』​里​关​于​哪​些​选​项​可​以​动​态​修​改​的​完​整​列​表​。​如​果​你​试​图​修​改​一​个​非​动​态的​设​置​,org.jboss.cache.config.ConfigurationException 将​被​抛​出​。

* 3.4 .1 通过 Option API 覆盖配​置 

  Option API 允​许​你​覆​盖​每​一​个​调​用​的​缓​存​行​为​。​这​包​括​创​建​ org.jboss.cache.config.Option 实​例, 在​ Option 对​象​设​置​你​需​要​覆​盖​的​选​项​并​在​调​用​方​法​前​作​为​参​数​传​递​给​ InvocationContext。

  例​如​,当​读​取​数​据​(当​用​在​事​务​时​,这​和​数​据​库​里​的​ SELECT FOR UPDAT E 模​式​类​似​)时​强​制​写​锁​。
----
// first start a transaction
cache.getInvocationContext().getOptionOverrides().setForceWriteLock(true);
Node n = cache.getNode(Fqn.fromString("/a/b/c"));
// make changes to the node
// commit transaction
----

  例​如​,抑​制​ REPL_SYNC 缓​存​里​的​ put 调​用​的​复​制​:
----
Node node = cache.getChild(Fqn.fromString("/a/b/c"));
cache.getInvocationContext().getOptionOverrides().setLocalOnly(true);
node.put("localCounter", new Integer(2));
----

关​于​ Option 类​的​选​项​细​节​,请​参​考​ Javadocs。


4 Batching API
++++++++++++++

* 4.1 简介 

  JBoss Cache 3.x 里​引​入​的​ Batching API,是​批​处​理​独​立​于​ JTA 事​务​的​调​用​的​一​个​机​制​。

  当​你​想​在​比​正​在​运​行​的​ JT A 事​务​更​细​的​作​用​域​里​批​处​理​复​制​调​用​时​,这​是​很​有​用​的​。

* 4.2 配置批处理 

  要​使​用​批​处​理​,你​需​要​在​缓​存​配​置​或​ Configuration 对​象​里​启​用​调​用​批​处​理​:
----
Configuration.setInvocationBatchingEnabled(true);
----
  或​在​ XML 文​件​里​:
----
<invocationBatching enabled="true"/>
----
  在​缺​省​情​况​下​,调​用​的​批​处​理​是​禁​用​的​。​请​注​意​,使​用​批​处​理​你不​需​要​定​义​事​务​管​理​者​。

* 4.3. Batching API

  一​旦​你​已​经​配​置​了​缓​存​来​使​用​批​处​理​,你​可​以​通​过​调​用​ Cache 上​的​ startBatch() 和​ endBatch() 来​使用​它​。​例​如​:
----
Cache cache = getCache();
// not using a batch
cache.put("/a", "key", "value"); // will replicate immediately
// using a batch
cache.startBatch();
cache.put("/a", "key", "value");
cache.put("/b", "key", "value");
cache.put("/c", "key", "value");
cache.endBatch(true); // This will now replicate the modifications since the
batch was started.
cache.startBatch();
cache.put("/a", "key", "value");
cache.put("/b", "key", "value");
cache.put("/c", "key", "value");
cache.endBatch(false); // This will "discard" changes made in the batch
----
  
5 部署 ​JBoss Cache
++++++++++++++++++

* 5.1 独​立​使​用​/在​程​序​里​进​行​部​署

  如​『​第 2.2 节 “初​始​化​和​启​动​缓​存​”』​和​『​第 3.2 节 “创​建​ Configuration”』​章​节​所​讨​论​的​,当​用​于​独​立​的 Java 程​序​里​时​, 要​做​的​只​是​用​ CacheFactory 和​ Configuration 实​例​或​ XML 文​件​初​始​化​缓​存​。

  当​运​行​在​应​用​服​务​器​里​的​应​用​程​序​希​望​部​署​缓​存​而​不​是​依​赖​于​应​用​服​务​器​的​部​署​功​能​时​,也​可​以​使​用​相​同​的技​术​。​通​过​ javax.servlet.ServletContextListener 部​署​缓​存​的​ webapp 是​其​中​一​个​例​子​。

  创​建​之​后​,你​可​以​通​过​ IOC 容​器​(如​ JBoss 微​容​器​)、​绑​定​ JNDI 或​简​单​地​持​有​对​缓​存​的​静​态​引​用​在​不​同​的应​用​程​序​组​件​间​分​享​你​的​缓​存​实​例​。

  如​果​在​部​署​缓​存​后​你​希​望​向​它​开​放​ JMX 里​的​管​理​接​口​, 请​参​考​『​第 5.4.2 节 “用​ MBeanServer 注​册 CacheJmxWrapper”』​。

* 5.2 通过 ​JBoss 微容器(JBoss AS 5.x)

  从​ AS 5 开​始​, JBoss AS 支​持​通​过​名​字​以​ -jboss-beans.xm l 结​尾​的​文​件​来​部​署​ POJO 服​务​。​POJO 服务​是​通​过​简​单​的​ Java 对​象​(Plain Old Java Object)实​现​的​,表​示​不​需​要​实​现​任​何​特​殊​接​口​或​继​承​任​何​特​定超​类​的​简​单​ Java bean。​Cache 是​一​个​ POJO 服​务​, Configuration 里​的​所​有​组​件​也​是​ POJO,所​以​以这​种​方​式​部​署​缓​存​是​一​个​自​然​的​步​骤​。

  缓​存​的​部​署​是​通​过​组​成​ JBoss AS 核​心​的​ JBoss 微​容​器​实​现​的​。​ JBoss 微​容​器​是​一​个​和​ Spring 类​似​的​复​杂的​ IOC 框​架​。​-jboss-beans.xm l 文​件​基​本​上​是​一​个​描​述​符​,它​告​诉​ ICO 框​架​如​何​组​装​组​成​ POJO 服​务的​不​同​的​ bean。

  对​于​ Configuration 组​件​开​放​的​每​个​可​配​置​选​项​,你​必​须​在​ configuration 类​里​定​义​ getter/setter。​这​样对​于​已​配​置​的​属​性​, JBoss 微​容​器​才​能​以​典​型​的​ IOC 方​式​调​用​相​应​的​方​法​。

  你​需​要​确​保​ jbosscache-core.jar 和​ jgroups.jar 库​都​位​于​你​的​服​务​器​的​ lib 目​录​。​当​你​以​ all 配​置​使​用​ JBoss AS 通​常​就​是​这​样​。​请​注​意​, 你​得​注​明​你​需​要​的​任​何​可​选​ JAR, 如​基​于​缓​存​配​置​的jdbm.jar。

  下​面​是​一​个​示​例​ -beans.xm l 文​件​。​如​果​你​查​看​ JBoss AS 5 的​ server/all/deploy 目​录​,你​会​看​到更​多​的​例​子​。
----
<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">
<!-- First we create a Configuration object for the cache -->
<bean name="ExampleCacheConfig"
class="org.jboss.cache.config.Configuration">
<!-- Externally injected services -->
<property name="runtimeConfig">
<bean class="org.jboss.cache.config.RuntimeConfig">
<property name="transactionManager">
<inject bean="jboss:service=TransactionManager"
property="TransactionManager"/>
</property>
<property name="muxChannelFactory"><inject
bean="JChannelFactory"/></property>
</bean>
</property>
<property name="multiplexerStack">udp</property>
<property name="clusterName">Example-EntityCache</property>
<property name="isolationLevel">REPEATABLE_READ</property>
<property name="cacheMode">REPL_SYNC</property>
<property name="stateRetrievalTimeout">15000</property>
<property name="syncReplTimeout">20000</property>
<property name="lockAcquisitionTimeout">15000</property>
<property name="exposeManagementStatistics">true</property>
</bean>
<!-- Factory to build the Cache. -->
<bean name="DefaultCacheFactory" class="org.jboss.cache.DefaultCacheFactory">
<constructor factoryClass="org.jboss.cache.DefaultCacheFactory"
factoryMethod="getInstance" />
</bean>
<!-- The cache itself -->
<bean name="ExampleCache" class="org.jboss.cache.Cache">
<constructor factoryMethod="createCache">
<factory bean="DefaultCacheFactory"/>
<parameter class="org.jboss.cache.config.Configuration"><inject
bean="ExampleCacheConfig"/></parameter>
<parameter class="boolean">false</parameter>
</constructor>
</bean>
</deployment>
----

  对​于​上​面​涉​及​的​语​法​,请​参​考​ JBoss 微​容​器​文​档​ [1]​。​基​本​上​, 每​个​ bean 元​素​都​代​表​一​个​用​于​创​建 Configuration 及​其​ 第 3.3 节 “Configuration 对​象​的​构​成​” 的​对​象​。​DefaultCacheFactory bean 构​建​缓​存​,从​概​念​上​来​说​它​完​成​和​『​第 2.2 节 “初​始​化​和​启​动​缓​存​”』​章​节​所​展​示​的​相​同​的​事​情​。

  上​面​的​例​子​里​的​一​件​有​趣​的​事​情​是​对​ Runtim eConfig 对​象​的​使​用​。​外​部​的​资​源​,如​微​容​器​可​见​的 TransactionManager 和​ JGroups ChannelFactory 都​依​赖​性​注​入​到​ RuntimeConfig 里​。​这​里​假定​在​ AS 里​的​其​他​部​署​描​述​符​里​,已​经​对​被​引​用​的​ bean 进​行​了​描​述​。

* 5.3 运​行​时​管​理​信​息

  JBoss Cache 包​含​ JMX MBean 来​开​放​缓​存​功​能​并​提​供​用​来​分​析​缓​存​操​作​的​统​计​信​息​。​JBoss Cache 也​可以​把​缓​存​事​件​作​为​通​过​ JMX 监​控​工​具​处​理​的​ MBean 通​知​广​播​。

* 5.3.1 JBoss Cache MBean

  JBoss Cache 提​供​一​个​可​以​将​向​你​的​环​境​ JMX 服​务​器​注​册​的​ MBean, 它​允​许​通​过​ JMX 访​问​缓​存​实​例​。​这个​ MBean 是​ org.jboss.cache.jmx.CacheJmxWrapper。​它​是​一​个​标​准​的​ MBean, 所​以​它​的 MBean 接​口​是​ org.jboss.cache.jmx.CacheJmxWrapperMBean。​它​可​用​于​:
. 获​得​对​底​层​ Cache 的​引​用​。
. 调​用​底​层​ Cache 的​ create/start/stop/destroy 生​命​周​期​操​作​
. 查​看​关​于​缓​存​的​当​前​状​态​的​细​节​(节​点​数​目​、​锁​信​息​等​)
. 查​看​缓​存​配​置​的​细​节​,并​修​改​那​些​可​以​在​缓​存​启​动​后​修​改​的​配​置

  关​于​更​多​的​细​节​,请​查​看​ CacheJm xWrapperMBean Javadoc。

  如​果​注​册​了​ CacheJmxWrapper,JBoss Cache 也​为​其​他​几​个​内​部​组​件​和​子​系​统​提​供​ MBean。​这​些 MBean 被​用​来​捕​获​和​开​放​和​缓​存​相​关​的​统​计​信​息​。​它​们​和​ CacheJmxWrapper MBean 之​间​有​着​分​层​的​关联​, 其​名​字​反​映​了​这​种​关​系​。​例​如​, jboss.cache:service=TomcatClusteringCache 实​例​的 replication interceptor MBean 将​可​以​通​过 jboss.cache:service=TomcatClusteringCache, cache-interceptor=ReplicationInterceptor 进​行​访​问​。

* 5.3.2 用​ MBeanServer 注册​ CacheJmxWrapper
  
  确​保​ CacheJm xWrapper 在​ JMX 里​注​册​的​最​好​办​法​依​赖​于​部​署​缓​存​的​方​式​。


* 5.3.2.1 用 ​Cache 实​例​在​程​序​里​进​行​注​册

  最​简​单​的​方​法​是​创​建​你​的​ Cache 并​传​递​给​ Jm xRegistrationManager 构​造​器​
----
CacheFactory factory = new DefaultCacheFactory();
// Build but don't start the cache
// (although it would work OK if we started it)
Cache cache = factory.createCache("cache-configuration.xml");
MBeanServer server = getMBeanServer(); // however you do it
ObjectName on = new ObjectName("jboss.cache:service=Cache");
JmxRegistrationManager jmxManager = new JmxRegistrationManager(server, cache,
on);
jmxManager.registerAllMBeans();
... use the cache
... on application shutdown
jmxManager.unregisterAllMBeans();
cache.stop();
----

* 5.3.2.2 用​ Configuration 实​例​在​程​序​里​注​册

  CacheJmxWrapper 是​一​个​ POJO, 所​以​微​容​器​创​建​它​不​会​有​什​么​问​题​。​其​中​的​窍​门​是​让​它​在​ JMX 里​注​册。​这​可​通​过​指​定​ CacheJmxWrapper bean 上​的org.jboss.aop.m icrocontainer.aspects.jmx.JMX 注​解​来​完​成​
----
<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">
<!-- First we create a Configuration object for the cache -->
<bean name="ExampleCacheConfig"
class="org.jboss.cache.config.Configuration">
... build up the Configuration
</bean>
<!-- Factory to build the Cache. -->
<bean name="DefaultCacheFactory" class="org.jboss.cache.DefaultCacheFactory">
<constructor factoryClass="org.jboss.cache.DefaultCacheFactory"
factoryMethod="getInstance" />
</bean>
<!-- The cache itself -->
<bean name="ExampleCache" class="org.jboss.cache.CacheImpl">
<constructor factoryMethod="createnewInstance">
<factory bean="DefaultCacheFactory"/>
<parameter><inject bean="ExampleCacheConfig"/></parameter>
<parameter>false</parameter>
</constructor>
</bean>
<!-- JMX Management -->
<bean name="ExampleCacheJmxWrapper"
class="org.jboss.cache.jmx.CacheJmxWrapper">
<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss.cache:service=
ExampleTreeCache",
exposedInterface=org.jboss.cache.jmx.CacheJmxWrapperMBean.class,
registerDirectly=true)</annotation>
<constructor>
<parameter><inject bean="ExampleCache"/></parameter>
</constructor>
</bean>
</deployment>
----

  如​『​第 5.3.2 节 “用​ MBeanServer 注​册​ CacheJmxWrapper”』​里​所​讨​论​的​,通​过 Configuration, CacheJmxWrapper 可​以​构​建​、​创​建​和​启​动​缓存。​对​于​微​容​器​来​说​, 这​是​首​选​的​方​法
, 因​为​它​保​留​了​创​建​ CacheFactory 所​需​的​样​板​ XML 文​件​。
----
<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">
<!-- First we create a Configuration object for the cache -->
<bean name="ExampleCacheConfig"
class="org.jboss.cache.config.Configuration">
... build up the Configuration
</bean>
<bean name="ExampleCache" class="org.jboss.cache.jmx.CacheJmxWrapper">
<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX
(name="jboss.cache:service=ExampleTreeCache",
exposedInterface=org.jboss.cache.jmx.CacheJmxWrapperMBean.class,
registerDirectly=true)</annotation>
<constructor>
<parameter><inject bean="ExampleCacheConfig"/></parameter>
</constructor>
</bean>
</deployment>
----

* 5.3.3 JBoss Cache 的统计信​息 

  JBoss Cache 捕​捉​拦​截​器​和​其​他​组​件​的​统​计​信​息​,并​通​过​一​系​列​ MBean 开​放​这​些​信​息​。​收​集​统​计​信​息​缺​省是​启​用​的​;对​于​某​个​缓​存​实​例​,它​可​以​通​过​ Configuration.setExposeManagementStatistics() setter 禁​用​。​请​注​意​, 统​计​信​息​主​要​是​由​ CacheMgmtInterceptor 提​供​的​,所​以​这​个​拦​截​器​从​这​个​角​度来​说​是​最​重​要​的​。​如​果​基​于​性​能​考​虑​, 你​想​禁​用​所​有​的​统​计​信​息​, 你​应​该​利​用 Configuration.setExposeManagementStatistics(false) 配​置​, 因​为​它​可​以​阻​止​缓​存​启​动​时​在拦​截​器​栈​里​包​含​ CacheMgmtInterceptor。

  如​果​ CacheJm xWrapper 在​ JMX 里​进​行​了​注​册​,wrapper 也​会​确​保​开​放​统​计​信​息​的​每​个​拦​截​器​和​组​件​都在​ JMX 里​注​册​一​个​ MBean。然​后​管​理​工​具​就​可​以​访​问​那​些​ MBean 以​查​看​统​计​信​息​。​请​参​考​『​第 13.1 节 “JBoss Cache 的​统​计​信​息​”』章​节​里​关​于​通​过​ JMX 可​用​的​统​计​信​息​方​面​的​内​容​。

* 5.3.4 接收​ JMX 通​知 

  如​『​第 2.7 节 “添​加​缓​存​ Listener - 注​册​缓​存​事​件​”』​章​节​里​所​述​,JBoss Cache 用​户​可​以​注​册​一​个​ listener 来​接​收​缓​存​事​件​。​用​户​可​以​利​用​缓​存​的​管​理​信​息​结​构​来​接​收​这​些​事​件​(JMX 通​知​)。​通​过​注​册​用​于 CacheJmxWrapper 的​ NotificationListener, 缓​存​事​件​可​以​作​为​通​知​访​问​。

  关​于​可​通​过​ CacheJm xWrapper 接​收​的​ JMX 通​知​列​表​,请​参​考​『​第 13.2 节 “JMX MBean 通​知​”』​。

  下​面​是​一​个​在​ JBoss 应​用​服​务​器​环​境​里​通​过​程​序​获​取​缓​存​通​知​的​例​子​。​在​这​个​例​子​里​,客​户​使​用​了​一​个​过​滤器​来​指​定​所​关​心​的​事​件​。
----
MyListener listener = new MyListener();
NotificationFilterSupport filter = null;
// get reference to MBean server
Context ic = new InitialContext();
MBeanServerConnection server =
(MBeanServerConnection)ic.lookup("jmx/invoker/RMIAdaptor");
// get reference to CacheMgmtInterceptor MBean
String cache_service = "jboss.cache:service=TomcatClusteringCache";
ObjectName mgmt_name = new ObjectName(cache_service);
// configure a filter to only receive node created and removed events
filter = new NotificationFilterSupport();
filter.disableAllTypes();
filter.enableType(CacheNotificationBroadcaster.NOTIF_NODE_CREATED);
filter.enableType(CacheNotificationBroadcaster.NOTIF_NODE_REMOVED);
// register the listener with a filter
// leave the filter null to receive all cache events
server.addNotificationListener(mgmt_name, listener, filter, null);
// ...
// on completion of processing, unregister the listener
server.removeNotificationListener(mgmt_name, listener, filter, null);
----

  下​面​是​在​前​面​例​子​里​使​用​的​简​单​的​通​知​ listener 的​实​现​。

----
private class MyListener implements NotificationListener, Serializable
{
public void handleNotification(Notification notification, Object handback)
{
String message = notification.getMessage();
String type = notification.getType();
Object userData = notification.getUserData();
System.out.println(type + ": " + message);
if (userData == null)
{
System.out.println("notification data is null");
}
else if (userData instanceof String)
{
System.out.println("notification data: " + (String) userData);
}
else if (userData instanceof Object[])
{
Object[] ud = (Object[]) userData;
for (Object data : ud)
{
System.out.println("notification data: " + data.toString());
}
}
else
{
System.out.println("notification data class: " +
userData.getClass().getName());
}
}
}
----

  注​意​:JBoss Cache 管​理​实​现​只​在​客​户​注​册​ MBean 通​知​接​收​时​才​侦​听​缓​存​事​件​。​只​要​没​有​客​户​注​册, MBean 就​不​会​充​当​缓​存​ listener。

* 5.3.5 用 ​jconsole 访​问​独​立​环​境​里​的​缓​存 ​MBean

  如​果​缓​存​实​例​运​行​在​提​供​ MBean 服​务​器​接​口​(如​ JBoss JMX 控​制​台​)的​应​用​服​务​器​里​,JBoss Cache MBean 是​很​容​易​可​以​被​访​问​的​。​关​于​如​何​访​问​运​行​在​服​务​器​的​ MBean 容​器​里​的​ MBean 的​说​明​,请​参​看​服务​器​文​档​ [1]。

  此​外​,如​果​运​行​在​非​服​务​器​环​境​里​,JBoss Cache MBean 也​可​以​使​用​ jconsole 访​问​。​当​在​应​用​服​务​器​外部​运​行​独​立​缓​存​时​,你​可​以​按​如​下​方​法​访​问​缓​存​的​ MBean。
. 当​启​动​缓​存​将​在​其​中​运​行​的​ JVM 时​,设​置​系​统​属​性​ -Dcom .sun.m anagem ent.jm xrem ote。
. 一​旦​ JVM 开​始​运​行​,启​动​ JDK 的​ /bin 目​录​下​的​ jconsole 程​序​
. 然​后​,你​可​以​选​择​ JVM 并​进​行​连​接​。​在​ MBean 面​板​里​你​将​看​到​可​用​的​ JBoss Cache MBean

  注​意​:当​连​接​到​运​行​ JBoss Cache 实​例​的​ JVM 时​,jconsole 将​自​动​注​册​为​侦​听​缓​存​通​知​的​ listener。


6 各​版​本​的​兼​容​性​和​互​用​性
+++++++++++++++++++++

* 6.1 API 的兼容性 

  通​常​来​说​,在​主​要​的​ JBoss Cache 发​行​版​本​是​兼​容​和​可​互​用​的​。​兼​容​性​是​指​应​用​程​序​的​升​级​只​需​要​简​单​地替​换​ jar 文​件​就​够​了​。​而​互​用​性​则​意​味​着​两​个​不​同​版​本​的​ JBoss Cache 可​用​在​同​一​群​集​里​,它​们​应​该​能​够​交换​复​制​和​状​态​转​移​信​息​。​要​注​意​的​是​,互​用​性​要​求​在​群​集​中​的​所​有​节​点​里​使​用​相​同​的​ JGroups 版​本​。​在​多数​情​况​下​,某​个​ JBoss Cache 版​本​所​使​用​的​ JGroups 能​够​进​行​升​级​。 JBoss Cache 2.x.x 不​能​ API 或​二​进​制​兼​容​以​前​的​ 1.x.x 版​本​。​从​另​一​方​面​来​说​,JBoss Cache 2.1.x 和​ 2.0.x 可​以​ API 和​二​进​制​兼​容​。 JBoss Cache 3.x 和​ 2.x 二​进​制​以​及​ API 兼​容​,但​我​们​仍​推​荐​不​要​在​客​户​端​代​码​里​使​用​已​取消​的​方​法​、​类​和​配​置​文​件​。

* 6.2 线​级​(Wire-level)互​用​性 

  你​可​以​配​置​属​性​ Configuration.setReplicationVersion() 来​控​制​缓​存​间​通​讯​的​线​格​式​。​在​和​旧版​本​通​讯​时​,它​们​可​从​更​高​效​和​更​新​的​协​议​转​换​为​”​兼​容​“​的​版​本​。​这​个​机​制​允​许​我​们​在​使​用​高​效​的​有​线​格​式的​同​时​,又​能​够​保​持​互​用​性​,从​而​改​进​了​ JBoss Cache。

* 6.3. 兼容性矩​阵 

  JBoss Cache 网​站​上​维​护​着​兼​容​性​矩​阵​ [1],它​包​含​了​ JBoss Cache、​JGroups 和​ JBoss Application Server 的​同​版​本​的​信​息​。
