JBoss Cache 的架​构
-----------------

7 架​构
++++++

本​节​更​深​入​地​介​绍​了​ JBoss Cache 的​架​构​,它​适​用​于​希​望​使​用​更​高​级​的​缓​存​功​能​、​扩​展​或​增​强​缓​存​、​编​写插​件​或​了​解​底​层​运​行​机​制​的​使用着.
 
* 7.1 JBoss Cache 里​的​数​据​结​构

  Cache 由​以​树​型​结​构​组​织​的​ Node 实​例​集​合​组​成​。​每​个​ Node 都​包​含​一​个​保​存​要​缓​存​的​数​据​对​象​的​表​。​请注​意​,这​个​结​构​是​一​种​数​学​树​,并​非​图​形​;每​个​ Node 都​有​且​只​有​一​个​父​节​点​, 且​根​节​点​由​一​个​不​变​的​全​限定​名​ Fqn.ROOT 表​示​。

  Figure 3-3  树型的数据结构

  在​上​面​的​图​表​里​,每​个​盒​子​都​代​表​一​个​ JVM。​你​可​以​看​到​两​个​缓​存​位​于​不​同​的​ JVM 里​,彼​此​复​制​数​据​。在​其​中​一​个​缓​存​里​的​任​何​修​改​(请​参​看​前​面​的​『​第 2 章 User API』​)都​将​复​制​到​另​外​一​个​缓​存​里​。​自​然​,群集​系​统​可​以​有​多​个​缓​存​。​根​据​事​务​性​设​置​, 复​制​将​在​每​次​修​改​发​生​后​或​事​务​结​束​后​(提​交​时​)进​行​。​当​新​的缓​存​被​创​建​时​,它​可​以​在​启​动​时​获​取​某​个​现​有​缓​存​的​内​容​。

* 7.2. SPI 接​口 

  除​了​ Cache 和​ Node 接​口​,JBoss Cache 也​开​放​更​强​大​的​ CacheSPI 和​ NodeSPI 接​口​,它​们​提​供​对 JBoss Cache 内​部​更​多​的​控​制​。​这​些​接​口​不​是​用​于​普​通​用​途​,它​们​适​用​于​扩​展​和​增​加​ JBoss Cache 、​编​写自​定​义​的​拦 ​截 ​器 ​(Interceptor) 或​类加载​器 ​(CacheLoader) 实​例​。

  图 3-4 SPI 接口 

  CacheSPI 接​口​无​法​被​创​建​,但​它​靠​这​些​接​口​的​ setCache(CacheSPI cache) 方​法​注​入​到Interceptor 和​ CacheLoader 实​现​里​。​C acheSPI 继​承​了​ Cache,所​以​基​本​ API 的​所​有​功​能​都​是​可用​的​。类​似​地​,NodeSPI 接​口​也​无​法​被​创​建​。​相​反​,它​是​通​过​执​行​ CacheSPI 上​的​操​作​来​获​得​的​。​例​如, Cache.getRoot() : Node 被​覆​盖​为​ CacheSPI.getRoot() : NodeSPI。

  请​注​意​,既​然​接​口​继​承​不​是​能​够​保​证​向​前​维​持​的​合​约​,我​们​不​推​荐​直​接​转​换​ Cache 或​ Node 为​其​ SPI 对​应接​口​,这​是​不​好​的​做​法​。​从​另​外​一​方​面​来​讲​,开​放​的​公​用​ API 是​保​证​可​以​维​持​的​。

* 7.3. 节​点​上​的​方​法​调​用

  既​然​缓​存​基​本​上​是​一​个​节​点​的​集​合​,当​作​为​整​体​或​单​个​节​点​调​用​缓​存​上​的​操​作​时​,群​集​、​持​久​化​、​逐​出​等​方面​都​需​要​应​用​到​这​些​节​点​上​。​要​以​一​种​清​洁​、​模​块​化​和​可​扩​展​的​方​式​实​现​这​一​点​,我​们​使​用​了​一​种​拦​截​器​链。​这​个​链​由​一​系​列​的​拦​截​器​组​成​,每​个​都​添​加​了​一​种​方​面​或​特​定​的​功​能​。​当​缓​存​创​建​时​,这​个​链​将​基​于​所​用的​配​置​构​建​。

  请​注​意​,NodeSPI 提​供​一​些​直​接​在​节​点​上​操​作​而​无​需​通​过​拦​截​器​链​的​方​法​(如​ xxxDirect() 方​法​族​)。插​件​作​者​应​该​注​意​到​使​用​这​样​的​方​法​将​影​响​到​缓​存​可​能​需​要​应​用​的​方​面​,如​锁​、​复​制​等​。​为​简​便​起​见​,请​不要​使​用​这​些​方​法​,除​非​你真的​知​道​自​己​在​干​什​么​!

* 7.3.1. 拦截​器

  JBoss Cache 基​本​上​是​一​个​核​心​的​数​据​结​构​ - 对​ DataContainer 的​实​现​ - 方​面​和​功​能​在​此​数​据​结​构​之​上用​拦​截​器​实​现​。​CommandInterceptor 是​一​个​抽​象​类​,拦​截​器​实​现​继​承​了​它​。CommandInterceptor 实​现​了​ Visitor 接​口​,所​以​它​能​够​以​一​种​强​类​型​的​方​式​修​改​命​令​。​下​节​将​介​绍关​于​ Visitor 和​ Command 的​更​多​内​容​。拦​截​器​实​现​在​ InterceptorChain 类​里​被​链​接​在​一​起​,它​在​整​个​链​里​分​发​一​个​命​令​。CallInterceptor 是​一​个​特​殊​的​拦​截​器​,它​总​是​位​于​链​的​末​端​来​调​用​通​过​ process() 方​法​传​递​的​命​令。

  JBoss Cache 附​带​几​个​拦​截​器​,代​表​着​不​同​的​行​为​方​面​,例​如​:
. TxInterceptor - 查​找​正​在​进​行​的​事​务​并​注​册​事​务​管​理​者​以​参​与​同​步​事​件​。
. ReplicationInterceptor - 用​ RpcManager 类​在​群​集​里​复​制​状​态​。
. CacheLoaderInterceptor - 如​果​内​存​里​没​有​请​求​的​数​据​时​,从​持​久​性​存​储​加​载​数​据​。

  针​对​你​的​缓​存​实​例​配​置​的​拦​截​器​链​可​以​通​过​调​用​ CacheSPI.getInterceptorChain() 获​得​和​检​查​,这个​方​法​返​回​一​个​已​排​序​的​拦​截​器​ List,它​是​以​命​令​将​遇​到​的​顺​序​进​行​排​序​的​。

* 7.3.1.1. 编​写​自​定​义​的​拦​截​器

  通​过​继​承​ Com m andInterceptor 并​基​于​你​感​兴​趣​拦​截​的​命​令​来​覆​盖​相​关​的​ visitXXX() 方​法​, 你​可​以编​写​自​定​义​的​拦​截​器​以​添​加​特​殊​的​方​面​或​功​能​。​你​也​可​以​继​承​一​些​其​他​的​抽​象​拦​截​器​,如
PrePostProcessingCommandInterceptor 和​ SkipCheckChainedInterceptor。​关​于​其​他​功能​的​细​节​,请​参​考​相​关​的​ Javadoc。

  自​定​义​拦​截​器​需​要​使​用​ Cache.addInterceptor() 方​法​添​加​到​拦​截​器​链​中​。​相​关​细​节​请​参​考 Javadocs。

  JBoss Cache 也​支​持​通​过​ XML 自​定​义​拦​截​器​。​相​关​细​节​请​参​考​ 第 12 章 配置参考​。

* 7.3.2. Command 和​ Visitor

  JBoss Cache 在​内​部​使​用​一​种​ command/visitor 模​式​来​执​行​ API 类​。​每​当​在​缓​存​接​口​上​调​用​一​个​方​法​,实​现了​ Cache 接​口​的​ CacheInvocationDelegate 将​创​建​一​个​ VisitableCommand 实​例​并​将​这​个​命​令分​发​到​拦​截​器​链​里​。​而​实​现​了​ Visitor 接​口​的​拦​截​器​能​够​处​理​它​们​所​感​兴​趣​的​ VisitableCommand 并添​加​行​为​到​这​个​命​令​里​。

  每​个​命​令​都​包​含​了​正​在​执​行​的​命​令​的​全​部​知​识​,如​所​使​用​的​参​数​和​封​装​在​ process() 方​法​里​的​处​理​行​为​。例​如​,当​调​用​ Cache.removeNode() 时​, RemoveNodeCommand 将​被​创​建​并​传​递​到​拦​截​器​链​里​,而 RemoveNodeCommand.process() 知​道​如​何​从​数​据​结​构​里​删​除​节​点​。

  除​了​可​被​访​问​以​外​,命​令​也​是​可​以​复​制​的​。​JBoss Cache marshaller 知​道​如​何​高​效​地​将​命​令​编​码​并​使​用​内​部的​基​于​ JGroups 的​ RPC 机​制​在​远​程​缓​存​实​例​上​调​用​它​们​。

* 7.3.3. InvocationContexts

  InvocationContext 保​留​着​单​次​调​用​期​间​的​中​间​状​态​,且​由​位​于​拦​截​器​链​前​端​的 InvocationContextInterceptor 设​置​和​销​毁​。

  InvocationContext,顾​名​思​义​,持​有​和​单​次​方​法​调​用​相​关​联​的​上​下​文​信​息​。​上​下​文​信​息​包​含​相​关​联​的 javax.transaction.Transaction 或 org.jboss.cache.transaction.GlobalTransaction、​方​法​调​用​起​始​者(InvocationContext.isOriginLocal())以​及​『​第 3.4.1 节 “通​过​ Option API 覆​盖​配​置​”』​、​以​及
被​锁​定​的​节​点​相​关​的​信​息​等​。

  InvocationContext 可​以​通​过​调​用​ Cache.getInvocationContext() 获​取​。

* 7.4. 用​于​子​系​统​的​管​理​者

  有​些​方​面​和​功​能​是​由​多​个​拦​截​器​共​享​的​。​其​中​一​些​已​经​封​装​成​管​理​者​,由​不​同​的​拦​截​器​所​使​用​,且​通​过 CacheSPI 接​口​被​访​问​。

. RpcManager - 这​个​类​负​责​通​过​ JGroups 频​道​的​对​远​程​缓​存​的​ RPC 调​用​,它​封​装​了​所​使​用​的​ JGroups 频​道​。
. BuddyManager - 这​个​类​管​理​ Buddy 组​并​调​用​组​远​程​调​用​以​将​缓​存​群​集​组​织​为​更​小​的​子​组​。
. CacheLoaderManager - 设​立​和​配​置​缓​存​加​载​器​。​这​个​类​在​委​托​类​里​包​裹​了​单​独​的​ CacheLoader 实​例​, 如 SingletonStoreCacheLoader 或​ AsyncCacheLoader,或​者​用​ ChainingCacheLoader 在​链​里添​加​ CacheLoader。

* 7.5. 编​码(Marshalling) 和线​格​式(Wire Format)

  JBoss Cache 的​早​期​版​本​只​是​简​单​地​通​过​ ObjectOutputStream 在​复​制​时​将​缓​存​数​据​写​入​到​网​络​里​。​在JBoss Cache 1.x.x 系​列​的​几​个​版​本​里​,这​种​方​法​逐​渐​被​取​消​而​采​用​了​一​种​更​为​成​熟​的​编​码​框​架​。​在​ JBoss Cache 2.x.x 系​列​里​,这​是​官​方​支​持​和​推​荐​的​写​入​对​象​到​数​据​流​里​的​唯​一​机​制​。

  Figure 3-5 Marshaller 接口

  Marshaller 接​口​从​ JGroups 继​承​了​ RpcDispatcher.Marshaller。​这​个​接​口​有​两​个​主​要​的​实​现​ - 委​托​的​ VersionAwareMarshaller 和​具​体​的​ CacheMarshaller300。 通​过​调​用​ CacheSPI.getMarshaller() 可​获​得​ marshaller,缺​省​是​ VersionAwareMarshaller。用​户​也​可​以​通​过​实​现​ Marshaller 接​口​或​继​承​ AbstractMarshaller 类​编​写​自​己​的​ marshaller,并​通过​ Configuration.setMarshallerClass() setter 将​其​添​加​到​配​置​中​。

  VersionAwareMarshaller, 顾​名​思​义​,这​个​ marshaller 在​写​入​时​添​加​版​本​ short 到​任​何​流​里​,启​用​相​似​的 VersionAwareMarshaller 实​例​来​读​取​版​本​ short 并​知​道​哪​个​专​有​的​ marshaller 实​现​来​委​托​调​用​。​例​如, CacheMarshaller200 是​用​于​ JBoss Cache 2.0.x 的​ marshaller。​JBoss Cache 3.0.x 附​带​具​有​改​进的​ wire 协​议​的​ CacheMarshaller300。​使​用​ VersionAwareMarshaller 帮​助​实​现​次​要​版​本​间​的 wire 协​议​的​兼​容​性​,但​仍​然​让​我​们​可​以​灵​活​地​调​整​和​改​进​次​要​和​ micro 版​本​间​的​ wire 协​议​。

* 7.6. 类​加​载​和​区

  当​用​于​应​用​服​务​器​的​群​集​状​态​时​,部​署​的​应​用​程​序​趋​于​把​专​有​的​对​象​实​例​放​入​到​需​要​复​制​的​缓​存​里​(或​者​是 HttpSession 对​象​)。​由​应​用​服​务​器​分​配​独​立​的​ ClassLoader 实​例​到​每​个​部​署​的​应​用​程​序​里​,但​由​应用​服​务​器​的​ ClassLoader 来​引​用​ JBoss Cache 库​, 这​是​很​常​见​的​。

  要​成​功​地​从​类​加​载​器​对​对​象​编​码​和​解​码​,我​们​使​用​一​个​称​为​区​(Region)的​概​念​。​区​是​缓​存​的​一​部​分​,它​共享​一​个​公​用​的​类​加​载​器​(区​也​有​其​他​用​途​ - 参​加​『​第 10 章 逐出(Eviction)』​)。

  区​是​通​过​调​用​ Cache.getRegion(Fqn fqn, boolean createIfNotExists) 方​法​并​返​回​ Region 接​口​的​实​现​来​创​建​的​。​获​得​了​区​以​后​,区​的​类​加​载​器​可​以​设​置​或​取​消​设​置​,而​区​可​以​激​活​和​取​消​激​活​。​在​缺省​情​况​下​,区​是​活​动​的​,除​非​ InactiveOnStartup 配​置​属​性​被​设​置​为​ true。

8. 缓​存​模​式​和​群​集
+++++++++++++++

本​章​将​围​绕​群​集​ JBoss Cache 进​行​讨​论​。

* 8.1. 缓存​复​制​模​式

  你​可​以​把​ JBoss Cache 配​置​为​本​地​或​群​集​形​式​。​在​群​集​里​, 你​可​以​配​置​缓​存​对​修​改​进​行​复​制​或​使​其​失​效(invalidate)。​下​面​是​详​细​的​讨​论​。

* 8.1.1. 本地模式

  本​地​缓​存​不​加​入​群​集​且​不​和​群​集​里​的​其​他​节​点​通​讯​。​它​仍​然​依​赖​于​ JGroups 库​, 即​使​并​没​有​启​动​ JGroups 频​道​。

* 8.1.2. 复制性缓存 

  复​制​性​缓​存​复​制​群​集​里​的​其​他​缓​存​实​例​的​修​改​。​复​制​可​以​在​每​次​修​改​(不​使​用​事​务​或​批​次​)发​生​后​进​行​, 或在​事​务​或​批​次​结​束​时​进​行​。

  复​制​可​以​同​步​也​可​以​异​步​进​行​。​使​用​哪​种​方​式​取​决​于​应​用​程​序​。​同​步​复​制​阻​塞​调​用​者​(put()) 直​到​所​有​修改​都​已​成​功​复​制​到​群​集​里​的​所​有​节​点​才​完​成​。​异​步​复​制​则​在​后​台​执​行​复​制​(put() 马​上​会​返​回​)。​JBoss Cache 也​提​供​一​个​复​制​队​列​,修​改​将​被​定​期​地​复​制​(如​根​据​设​定​的​时​间​间​隔​),或​者​在​超​出​队​列​大​小​一​定​限额​时​进​行​,亦​或​两​者​结​合​进​行​。​由​于​复​制​是​由​后​台​线​程​完​成​的​,所​以​复​制​队​列​可​以​提​供​更​好​的​性​能​。

  异​步​复​制​更​快​(不​会​阻​塞​调​用​者​),因​为​同​步​复​制​要​求​从​群​集​里​所​有​节​点​获​得​应​答​来​确​定​已​经​接​收​到​并​成​功应​用​了​相​关​修​改​(考​虑​到​往​返​时​间​)。​然​而​,当​同​步​复​制​成​功​返​回​时​,调​用​者​确​实​知​道​所​有​修​改​都​已​经​成​功应​用​到​了​所​有​节​点​,而​异​步​复​制​就​未​必​了​。​进​行​异​步​复​制​时​,发​生​的​错​误​只​是​简​单​地​写​入​到​日​志​里​。​而​使​用事​务​时​,可​能​事​务​成​功​完​成​了​,但​并​非​所​有​缓​存​实​例​上​的​复​制​都​会​成​功​。

* 8.1.2.1. 复​制​性​缓​存​和​事​务

  在​使​用​事​务​时​,复​制​只​发​生​在​事​务​边​界​,也​就​是​说​,发​生​在​事​务​提​交​的​时​候​。​这​可​以​最​小​化​进​行​复​制​所​需​的负​载​, 因​为​这​会​广​播​单​个​的​修​改​而​不​是​一​系​列​单​独​的​修​改​, 而​且​这​比​不​使​用​事​务​效​率​高​得​多​。​其​另​外​一​个​好处​是​, 事​务​回​滚​不​会​在​群​集​里​广​播​消​息​。

  根​据​你​使​用​异​步​或​同​步​模​式​运​行​群​集​,JBoss Cache 将​分​别​使​用​单​阶​段​或​两​阶​段​提​交​协​议​。

. 单阶段提交 - 当​缓​存​模​式​为​ REPL_ASYNC 时​使​用​它​。​所​有​的​修​改​都​在​单​一​调​用​里​被​复​制​,指​示​远​程​缓​存​把​修​改​应​用​到​它们​本​地​的​内​存​状​态​并​在​本​地​进​行​提​交​。​既​然​通​信​是​异​步​的​,远​程​的​错​误​/回​滚​都​不​会​反​馈​给​事​务​的​发​起​者​。
. 两​阶​段​提​交 - 当​缓​存​模​式​为​ REPL_SYNC 时​使​用​它​。​在​提​交​事​务​时​,JBoss Cache 将​广​播​一​个​ prepare 调​用​,它​承​载​所有​和​事​务​相​关​的​修​改​。​然​后​远​程​缓​存​会​获​取​其​内​存​状​态​的​本​地​锁​并​应​用​修​改​。​一​旦​所​有​的​远​程​缓​存​都​响​应​了这​个​ prepare 调​用​,事​务​的​发​起​者​将​广​播​一​个​提​交​消​息​。​这​指​示​所​有​的​远​程​缓​存​提​交​它​们​的​数​据​。​如​果​任​何一​个​缓​存​没​有​响​应​这​个​ prepare 调​用​,事​务​的​发​起​者​将​广​播​一​个​回​滚​消​息​。请​注​意​,虽​然​ prepare 阶​段​是​同​步​的​,提​交​和​回​滚​阶​段​却​是​异​步​的​。​这​是​因​为​ JTA 规​格​没​有​指​定​事务​性​资​源​在​此​时​该​如​何​处​理​故​障​; 而​参​与​事​务​的​其​他​资​源​可​能​具​有​不​确​定​的​状​态​。​因​此​, 我​们​除​去​了​事​务​在这​个​阶​段​的​同​步​通​讯​开​销​,也​就​是​使​用​ SyncCommitPhase 和​ SyncRollbackPhase 配​置​选​项​迫​使​它​们同​步​。

* 8.1.2.2. Buddy 复制 

  Buddy 复​制​允​许​你​不​把​数​据​复​制​到​群​集​里​的​所​有​节​点​。​相​反​,每​个​实​例​在​群​集​里​选​择​一​个​或​多​个​ 'buddy' 且只​复​制​到​这​些​选​定​的​ buddy 里​。​这​极​大​地​提​高​了​可​扩​充​性​,因​为​新​实​例​加​入​到​群​集​里​不​会​对​内​存​和​网​络​负​载产​生​影​响​。Buddy 复​制​最​常​见​的​例​子​是​ servlet 容​器​使​用​复​制​性​缓​存​来​存​储​ HTTP 会​话​数​据​。​Buddy 复​制​运​行​正​常​并​带来​实​质​性​好​处​的​一​个​前​提​条​件​是​对​ session affinity 的​使​用​, 它​也​被​称​为​ HTTP 会​话​复​制​方​面​的​ sticky sessions。​它​表​示​如​果​某​些​数​据​被​频​繁​使​用​,那​么​这​些​数​据​最​好​位​于​同​一​实​例​里​,而​不​是​以​ round-robin 的方​式​进​行​访​问​。​这​可​以​帮​助​缓​存​群​集​优​化​ buddy 的​选​择​、​存​数​据​的​储​位​置​并​最​小​化​复​制​负​载​。

** 选​择 Buddy

  Figure 3-6 BuddyLocator

  Buddy 复​制​选​择​使​用​一​个​ BuddyLocator 实​例​,它​包​含​在​网​络​里​选​择​ buddy 的​逻​辑​。​JBoss Cache 目​前带​有​一​个​实​现​ NextMemberBuddyLocator,如​果​没​有​其​他​实​现​,它​将​被​缺​省​使​用​。​顾​名​思​义, NextMemberBuddyLocator 选​择​群​集​里​的​下​一​个​成​员​,并​保​证​为​每​个​实​例​平​均​分​配​ buddy。
  NextMemberBuddyLocator 使​用​两​个​可​选​参​数:
. num Buddies - 指​定​每​个​实​例​应​该​选​择​多​少​个​ buddy 来​存​储​数​据​。​它​的​缺​省​值​为​ 1。
. ignoreColocatedBuddies - 表​示​每​个​实​例​都​将试图​选​择​一​个​不​同​主​机​上​的​ buddy。​如​果​不​能​这​样做​,它​将​成​为​共​存​的​实​例​。​它​的​缺​省​值​为​ true。

** Buddy 池

  也​称​为复制组​,buddy 池​是​一​个​可​选​的​结​构​,群​集​里​的​每​个​实​例​都​可​能​配​置​一​个​ buddy 池​的​名​字​。​在​选​择 buddy 的​时​候​,你​可​以​把​它​想​象​成​为​一​个​“​排​他​的​俱​乐​部​成​样​资​格​”​, BuddyLocator 将​尝​试​并​选​择​共​享​相同​的​ Buddy 池​名​称​的​ buddy。​这​给​予​了​系​统​管​理​员​控​制​ buddy 选​择​某​种​程​度​的​灵​活​性​。​例​如​,系​统​管​理​员可​以​把​两​个​实​例​放​在​位​于​独​立​机​架​上​的​两​个​独​立​物​理​服​务​器​上​,而​它​们​却​在​相​同​的​ buddy 池​里​。​所​以, BuddyLocator 不​是​选​择​相​同​机​架​上​不​同​主​机​里​的​实​例​,而​是​选​择​不​同​机​架​上​相​同​的​ buddy 池​里​的​实​例, 这​添​加​了​某​种​程​度​的​冗​余​性​。

** 失效切换

  在​发​生​实​例​崩​溃​时​,我​们​假​定​连​接​缓​存​(直​接​、​或​间​接​地​通​过​其​他​服​务​如​ HT T P 会​话​复​制​)的​客​户​能​够​把​请求​重​定​向​到​群​集​里​任​何​随​机​的​缓​存​实​例​。​这​就​带​来​了​ Data Gravitation 的​概​念​。Data Gravitation 是​这​样​一​个​概​念​,如​果​向​群​集​里​的​某​个​缓​存​发​出​请​求​,而​这​个​缓​存​没​有​包​含​相​关​信​息​,那么​它​将​向​群​集​里​的​其​他​实​例​请​求​这​个​信​息​。​换​句​话​说​,数​据​是​ lazily 转​移​, 只有​当​其​其​他​节​点​请​求​时​才​进​行提​取​。​当​负​荷​很​重​的​节​点​中​的​一​个​(或​一​些​)崩​溃​时​,这​种​策​略​防​止​了​大​量​数​据​对​网​络​的​影​响​。

  如​果​仍​未​获​得​所​需​信​息​,它​将​(可​选​地​)请​求​其​他​实​例​检​查​为​其​他​缓​存​备​份​的​数​据​。​这​意​味​着​即​使​包​含​会​话的​缓​存​终​止​了​,其​他​实​例​仍​将​可​以​通​过​搜​索​群​集​里​的​备​份​来​访​问​这​个​数​据​。一​旦​被​加​载​,这​个​数​据​将​被​转​移​到​发​出​请​求​的​实​例​并​添​加​到​该​实​例​的​数​据​树​里​。​然​后​它​将​从​所​有​其​他​实​例(和​备​份​)中​删​除​(可​选​),所​以​如​果​使​用​了​ session affinity,affinity 将​是获得这个数据的所有权​的​新​缓​存实​例​。

  Data Gravitation 被​以​拦​截​器​的​形​式​实​现​。​下​面​的​配​置​选​项​(都​是​可​选​的​)属​于​ data gravitation。
. dataGravitationRemoveOnFind - 迫​使​拥​有​数​据​或​备​份​的​所​有​远​程​缓​存​删​除​该​数​据​,因​此​使​发​出请​求​的​缓​存​成​为​新​的​数​据​所​有​者​。​如​果​设​置​为​ false,逐​出​而​不​是​删​除​消​息​将​被​广​播​,所​以​持​久​化​在​缓存​加​载​器​里​的​任​何​状​态​将​继​续​保​留​。​如​果​你​配​置​了​共​享​缓​存​加​载​器​,这​会​很​有​用​。​它​缺​省​为​ true。
. dataGravitationSearchBackupT rees - 请​求​远​程​实​例​搜​索​其​备​份​以​及​主​数​据​树​。​它​的​缺​省​值​为true。​它​如​果​为​ true,除​了​数​据​所​有​者​节​点​外​,备​份​节​点​也​将​响​应​ data gravitation 请​求​。
. autoDataGravitation - 每​次​缓​存​丢​失​时​,data gravitation 是​否​发​生​。​设​置​为​ false 可​以​阻​止​不​必要​的​网​络​调​用​。​多​数​情​况​下​都​知​道​何​时​进​行​ data gravitation 并​传​入​一​个​ Option 来​为​每​次​调​用​启​用 data gravitation。​如​果​ autoDataGravitation 为​ true,这​个​ Option 就​没​有​必​要​了​。

** 配​置

  关​于​配​置​ Buddy 复​制​的​细​节​,请​参​考​『​第 12 章 配置参考​』​。

* 8.2. 失效(Invalidation)

  如​果​缓​存​被​配​置​为​失​效​而​不​是​复​制​,每​次​数​据​有​修​改​时​,群​集​里​的​其​他​缓​存​将​收​到​一​条​消​息​来​通​知​它​们​这​个数​据​已​经​陈​旧​且​应​该​从​内​存​逐​出​。​当​失​效​和​共​享​的​缓​存​加​载​器​(参​见​『​第 9 章 缓存加载器​』​章​节​)一​起​使​用时​,远​程​缓​存​将​引​用​共​享​缓​存​加​载​器​来​获​取​修​改​的​数​据​。​这​样​做​的​好​处​是​双​重​的​:最​小​化​了​网​络​负​载​,因​为失​效​消​息​和​复​制​的​数​据​相​比​非​常​小​,且​群​集​里​的​其​他​缓​存​只​是​在​需​要​时​才​以​ lazy 的​方​式​查​找​修​改​的​数​据​。

  每​次​修​改​发​生​后​(无​事​务​或​批​次​时​)或​事​务​结​束​时​成​功​提​交​后​,失​效​消​息​都​被​发​送​。​这​通​常​更​为​高​效​,因​为失​效​消​息​可​以​对​整​个​事​务​进​行​优​化​而​不​是​以​单​次​修​改​为​基​础​。失​效​可​以​是​同​步​也​可​以​是​异​步​的​,在​复​制​的​情​况​下​,同​步​失​效​会​阻​塞​至​群​集​里​所​有​缓​存​都​接​收​到​失​效​消​息​并已​经​逐​出​陈​旧​数​据​,而​异​步​失​效​则​以​ 'fire-and-forget' 的​模​式​工​作​,其​失​效​消​息​将​进​行​广​播​而​不​会​阻​塞​或​等待​回​应​。

* 8.3. 状​态​转​移
  
  状态转移(State Transfer) 指​的​是​ JBoss Cache 实​例​在​准​备​开​始​提​供​服​务​前​,从​另​外​一​个​实​例​获​取​当​前​状态​并​将​它​集​成​到​自​身​状​态​中​。
 
** 状态转移的类​型 

  根​据​对​状​态​转​移​的​视​角​不​同​,状​态​转​移​的​类​型​有​三​种​意​思​。​首​先​,在​部​分​状​态​转​移​实​现​的​上​下​文​里​,有​两​种完​全​不​同​的​类​型​:基​于​字​节​队​列​和​基​于​流​的​状​态​转​移​。​第​二​,根​据​被​转​移​的​子​树​而​言​,状​态​转​移​可​以​是​完​全的​或​部​分​的​。​整​个​缓​存​树​的​转​移​代​表​了​完​全​的​转​移​,而​部​分​子​树​的​转​移​则​代​表​着​部​分​状​态​转​移​。​最​后​,状​态转​移​可​以​是​“​内​存​”​和​“​永​久​性​”​转​移​,这​取​决​于​对​缓​存​的​使​用​情​况​。

** 字​节​队​列​和​基​于​流​的​状​态​转​移

  对​于​ 2.0 以​前​的​版​本​来​说​,基​于​字​节​队​列​的​转​移​是​缺​省​的​也​是​唯​一​的​转​移​方​法​。​基​于​字​节​队​列​的​转​移​加​载​整个​状​态​到​一​个​字​节​队​列​里​并​发​送​到​接​收​状​态​的​成​员​。​这​个​方​法​的​一​个​主​要​限​制​是​非​常​大​型​的​状​态​转​移(>1GB)很​可​能​导​致​抛​出​ OutOfMemoryException。​基​于​流​的​状​态​转​移​为​状​态​读​取​者​提​供​了​一​个InputStream,并​为​写​入​者​提​供​了​一​个​ OutputStream。​OutputStream 和​InputStream 以​字​节​块​的​方​式​启​用状​态​转​移​,因​此​对​内​存​的​需​求​更​小​。​例​如​,如​果​应​用​程​序​状​态​以​树​的​形​式​出​现​,它​的​总​的​大​小​为​ 1GB,那​么基​于​流​的​转​移​并​不​需​要​提​供​ 1GB 的​字​节​队​列​,它​以​ N 个​字​节​为​一​块​,而​ N 是​可​以​自​定​义​的​。

  基​于​字​节​队​列​和​流​的​状​态​转​移​是​完​全​ API 透​明​的​、​可​互​用​的​,且​通​过​标​准​的​缓​存​配​置​ XML 文​件​进​行​静​态​配置​。​关​于​如​何​从​一​种​转​移​切​换​到​另​外​一​种​的​细​节​,请​参​考​ JGroups 文​档​。

** 完​全​和​部​分​的​状​态​转​移

  如​果​启​用​了​ in-memory 或​ persistent 状​态​转​移​,在​不​同​的​时​间​将​进​行​完​整​的​或​部​分​的​状​态​转​移​,这​取​决​于​对缓​存​的​使​用​。​完​整​的​(Full)状​态​转​移​指​的​是​和​整​个​树​相​关​的​状​态​转​移​ - 也​就​是​包​括​根​节​点​下​面​的​所​有​节​点。​部​分​的​(Partial)状​态​转​移​指​的​是​树​的​一​部​分​进​行​转​移​ - 也​就​是​某​个​全​限​定​名​以​及​下​面​的​所​有​节​点​。

  如​果​启​用​了​ in-memory 或​ persistent 状​态​转​移​,状​态​转​移​将​发​生​在​下​列​时​刻​:

*** 初​始​状​态​转​移​。​这​发​生​在​缓​存​第​一​次​被​启​动​时​(作​为​执​行​ start() 方​法​的​一​部​分​)。​这​是​一​个​完​整的​状​态​转​移​。​状​态​从​已​经​操​作​最​久​的​缓​存​实​例​里​获​取​。​[1]如​果​接​收​或​集​成​状​态​出​现​任​何​问​题​,缓​存​将不​会​启​动​。
除​非​出​现​下​列​状​况​,否​则​初​始​状​态​转​移​都​将​发​生​:
. 缓​存​的​ InactiveOnStartup 属​性​为​ true。​这​个​属​性​和​基​于​区​的​编​码​(marshalling)一​起使​用​。
. 使​用​了​ Buddy 复​制​。​关​于​带​有​ Buddy 复​制​的​状​态​转​移​的​更​多​细​节​,请​参​考​下​面​的​内​容​。

*** 激​活​区​之​后​的​部​分​状​态​转​移​。​当​使​用​基​于​区​的​编​码​时​,应​用​程​序​需​要​在​缓​存​里​注​册​专​门​的​类​加​载​器​。这​个​类​加​载​器​用​于​对​缓​存​的​特​定​区​(子​树​)的​状​态​进​行​解​码​。在​注​册​后​,应​用​程​序​调​用​cache.getRegion(fqn, true).activate(),这​会​初​始​化​相​关​子​树状​态​的​部​分​状​态​转​移​。​请​求​首​先​进​入​缓​存​里​最​老​的​节​点​。​然​而​,如​果​该​实​例​并​未​响​应​以​提​供​状​态​,该请​求​将​轮​询​每​个​实​例​直​至​有​一​个​能​提​供​状​态​,或​者​直​至​已​经​遍​历​了​所​有​节​点​。通​常​,当​使​用​了​基​于​ region 的​列​集​,缓​存​的​ InactiveOnStartup 属​性​将​被​设​置​为​ true。​这​会​禁止​初​始​的​状​态​转​移​,这​是​由​于​缺​乏​对​转​移​的​状​态​进​行​解​序​列​化​的​能​力​。

*** Buddy 复​制​。​当​使​用​ Buddy 复​制​时​,初​始​状​态​转​移​将​被​禁​用​。​相​反​,当​一​个​缓​存​实​例​加​入​到​这​个​群​集时​,它​将​成​为​一​个​或​多​个​其​他​的​实​例​的​ buddy,同​时​那​些​实​例​也​成​为​它​的​ buddy。​每​当​实​例​决​定​是​否有​一​个​新​ buddy 为​其​提​供​备​份​时​,它​将​把​自​己​的​当​前​状​态​“​推​(push)”​给​新​的​ buddy。​状​态​的​这​种​“推​”​和​基​于​“​拉​(pull)”​的​其​他​形​式​的​状​态​转​移​(如​,接​收​者​请​求​并​接​收​状​态​)有​少​许​不​同​。​然​而​,状态​的​准​备​(preparing)和​集​成​(integrating)过​程​仍​是​一​样​的​。
只​有​ InactiveOnStartup 属​性​为​ false 时​,Buddy 组​上​的​状​态​的​“​推​”​才​会​发​生​。​如​果​它​为 true, buddy 间​的​状​态​转​移​只​在​应​用​程​序​对​组​的​不​同​成​员​激​活​区​时​才​会​发​生​。区​激​活​之​后​的​部​分​状​态​转​移​和​ buddy 复​制​也​有​稍​许​不​同​。​和​从​一​个​缓​存​实​例​请​求​部​分​状​态​并​尝​试​所​有实​例​直​至​有​实​例​应​答​不​同​,使​用​ buddy 复​制​时​,激​活​ region 的​实​例​将​从​作​为​备​份​的​每​个​实​例​中​请​求部​分​状​态​。

** 临​时​(内​存​)和​永​久​性​的​的​状​态​转​移​

  获​取​和​集​成​的​状​态​由​两​个​基​本​类​型​组​成​:
. 临​时​(T ransient)或​内​存​(in-memory) 状​态​。​这​组​成​了​另​外​一​个​缓​存​实​例​的​实​际​内​存​状​态​ - 提​供​状态​的​缓​存​中​不​同​内​存​里​节​点​的​内​容​被​序​列​化​和​转​移​;接​收​者​把​数​据​解​序​列​化​,在​自​己​的​内​存​树​里​创​建相​应​的​节​点​并​用​所​转​移​的​数​据​对​其​进​行​填​充​。
. "Persistent" 状​态​。​只​有​使​用​了​非​共​享​的​缓​存​加​载​器​时​才​可​用​。​存​储​在​状​态​提​供​者​缓​存​里​的​状​态​被​解序​列​化​和​转​移​;接​收​者​把​数​据​传​递​到​自​己​的​缓​存​加​载​器​里​,并​把​它​持​久​化​到​接​收​者​的​持​久​性​存​储​里​。 把​缓​存​加​载​器​的​ fetchPersistentState 属​性​设​置​为​ true 可​以​启​用​ "Persistent" 状​态​转​移​。​如果​同​时​配​置​了​多​个​缓​存​加​载​器​,只​有​其​中​一​个​才​能​把​这​个​属​性​设​置​为​ true;否​则​在​启​动​时​会​抛​出​异​常。
共​享​缓​存​加​载​器​的​ Persistent 状​态​转​移​没​有​意​义​,因​为​提​供​数​据​的​相​同​的​持​久​性​存​储​在​接​收​数​据​时​将终​止​。​因​此​,如​果​使​用​了​共​享​缓​存​加​载​器​,缓​存​将​不​会​允​许​ Persistent 状​态​转​移​,即​使​把​缓​存​加​载​器的​ fetchPersistentState 设​置​为​了​ true。

  使​用​哪​种​类​型​的​状​态​转​移​取​决​于​缓​存​的​用​法​。
. 如​果​使​用​了​ write-through 缓​存​加​载​器​,持​久​性​状​态​将​完​全​代​表​当​前​的​缓​存​状​态​。​数​据​可​能​已​经​从​内​存状​态​里​逐​出​,但​它​将​仍​然​位​于​持​久​性​存​储​里​。​在​这​种​情​况​下​,如​果​缓​存​加​载​器​不​是​共​享​的​,持​久​性​状态​转​移​被​用​来​确​保​新​缓​存​具​有​正​确​的​状​态​。​如​果​希​望​有​一​个​“​热​(hot)”​缓​存​(但​缓​存​开​始​提​供​服​务​时,在​内​存​里​具​有​所​有​相​关​数​据​),内​存​状​态​也​可​以​转​移​。​(请​注​意​,<loaders> 配​置​元​素​里​的<preload> 元​素​也​可​以​被​用​来​提​供​ "warm" 或​ "hot" 的​缓​存​而​不​需​要​进​行​内​存​状​态​转​移​。​这​个​方​法减​轻​了​提​供​状​态​的​缓​存​实​例​的​负​担​,但​增​加​了​接​收​端​的​持​久​性​存​储​的​负​载​。​)
. 如​果​使​用​了​带​钝​化​的​缓​存​加​载​器​,那​只​有​合​并​内​存​状​态​(也​就​是​非​钝​化​状​态​)和​持​久​性​状​态​(也​就​是已​钝​化​状​态​)才​能​获​得​完​整​状​态​。​因​此​,内​存​状​态​的​转​移​是​必​需​的​。​如​果​缓​存​加​载​器​不​是​共​享​的​,那么​持​久​性​状​态​的​转​移​是​必​需​的​。
. 如​果​没​有​使​用​缓​存​加​载​器​且​缓​存​只​是​一​个​ write-aside 缓​存​(例​如​,用​来​缓​存​只​有​在​持​久​性​存​储​如​数​据库​里​找​到​的​数​据​的​缓​存​),内​存​状​态​是​否​应​该​转​移​取​决​于​是​否​需​要​一​个​“​热​”​缓​存​。

**  配置状态转​移 

  要​确​保​状​态​转​移​如​预​想​的​一​样​进​行​,群​集​里​的​所​有​节​点​针​对​永​久​性​和​临​时​状​态​都​采​用​相​同​的​配​置​很​重​要​。​这是​因​为​基​于​字​节​队​列​的​转​移​只​依​赖​于​请​求​者​的​配​置​,而​基​于​流​的​转​移​则​依​赖​于​请​求​者​和​发​送​者​的​配​置​,且​期望​这​两​者​是​相​同​的​。


9. 缓存加载器 
++++++++++++

JBoss Cache 可​以​使​用​缓存加载器(CacheLoader) 来​把​缓​存​备​份​到​后​台​数​据​库​里​。​如​果​ JBoss Cache 配​置​了​缓​存​加​载​器​,它​会​具​有​下​面​的​功​能​:

. 每​当​缓​存​元​素​被​访​问​且​该​元​素​不​在​缓​存​里​(例​如​,由​于​ eviction 或​服​务​器​重​启​)时​,如​果​缓​存​加​载​器​可以​在​后​台​数​据​库​里​找​到​该​元​素​,那​么​加​载​器​将​透​明​地​把​该​元​素​加​载​到​缓​存​里​。
. 每​当​元​素​被​修​改​、​添​加​或​删​除​时​,这​种​修​改​将​通​过​缓​存​加​载​器​持​久​化​在​后​台​库​中​。​如​果​使​用​了​事​务​,那么​在​事​务​里​发​生​的​所​有​修​改​都​将​被​持​久​化​。​为​此​, 缓存​加​载​器​将​参​与​事​务​管​理​者​运​行​的​两​阶​段​的​提​交​协议​, 虽​然​它​并​不​是​显​性​地​这​么​做​。

* 9.1 CacheLoader 接口和生命周期

  Figure 3-8 CacheLoader 接口 

  JBoss Cache 和​ CacheLoader 实​现​之​间​的​关​系​如​下​。​当​ CacheLoaderConfiguration 非​空​时​, 缓存​创​建​时​将​创​建​每​个​配​置​的​ cacheloader 实​例​, 且​在​缓​存​启​动​时​启​动​。但​启​动​缓​存​时​, CacheLoader.create() 和​ CacheLoader.start() 被​调​用​。​当​缓​存​停​止​时​则​相​应​地调​用​ stop() 和​ destroy()。之​后​,setConfig() 和​ setCache() 被​调​用​。​后​者​可​以​用​来​存​储​对​缓​存​的​引​用​,前​者​可​以​用​来​配​置 CacheLoader 的​这​个​实​例​。​例​如​,这​里​的​数​据​库​缓​存​加​载​器​可​以​建​立​和​数​据​库​的​连​接​。CacheLoader 接​口​有​一​系​列​方​法​在​没​有​使​用​事​务​时​可​以​调​用​:get()、​ put()、​remove() 和 removeData():它​们​立​即​读​取​/写​入​/删​除​值​。​上​述​接​口​的​ javadoc 注​释​里​描​述​了​这​些​方​法​。和​事​务​相​关​的​有​ 3 个​方​法​:prepare()、​commit() 和​ rollback()。​当​事​务​提​交​时​ prepare() 被​调用​。​它​以​事​务​对​象​和​修​改​列​表​作​为​参​数​。​事​务​对​象​可​以​用​作​事​务​ hashmap 的​键​,其​值​就​是​修​改​列​表​。​每​个修​改​列​表​都​有​大​量​的​ Modification 元​素​,代​表​着​给​定​事​务​对​缓​存​的​修​改​。​当​ prepare() 成​功​返​回​时​, 缓​存​加​载​器必须​能​够​成​功​提​交​(或​回​滚​)事​务​。JBoss Cache 会​在​合​适​时​候​对​缓​存​加​载​器​调​用​ prepare()、​commit() 和​ rollback(). commit() 方​法​通​知​缓​存​加​载​器​提​交​事​务​,而​ rollback() 方​法​则​通​知​缓​存​加​载​器​取​消​和​该​事​务​相​关​联​的修​改​。

  关​于​每​个​方​法​的​详​细​解​释​以​及​需​要​履​行​的​合​约​实​现​细​节​,请​参​考​本​接​口​的​ Javadoc。

* 9.2. 配置

  缓​存​加​载​器​是​在​ JBoss Cache 的​ XML 文​件​里​进​行​配​置​的​,你​可​以​在​一​个​链​里​同​时​定​义​几​个​缓​存​加​载​器​。​其影​响​是​缓​存​将​按​照​配​置​的​顺​序​查​看​所​有​的​缓​存​加​载​器​,直​到​它​找​到​一​个​有​效​的​、​非​空​的​数​据​元​素​。​当​执​行​写操​作​时​,所​有​的​缓​存​加​载​器​都​被​写​入​(除​了​ ignoreModifications 元​素​设​置​为​ true 的​特​殊​加​载​器​)。
相​关​细​节​请​参​考​『​配​置​』​章​节​。
----
...
<!-- Cache loader config block -->
<!-- if passivation is true, only the first cache loader is used; the rest are
ignored -->
<loaders passivation="false" shared="false">
<preload>
<!-- Fqns to preload -->
<node fqn="/some/stuff"/>
</preload>
<!-- if passivation is true, only the first cache loader is used; the rest
are ignored -->
<loader class="org.jboss.cache.loader.JDBCCacheLoader" async="false"
fetchPersistentState="true"
ignoreModifications="false" purgeOnStartup="false">
<properties>
cache.jdbc.driver=com.mysql.jdbc.Driver
cache.jdbc.url=jdbc:mysql://localhost:3306/jbossdb
cache.jdbc.user=root
cache.jdbc.password=
</properties>
</loader>
</loaders>
----
class 元​素​定​义​了​缓​存​加​载​器​实​现​类​。​(请​注​意​,由​于​ JBoss AS 属​性​编​辑​器​里​的​一​个​程​序​错​误, Windows 文​件​名​里​的​反​斜​杠​可​能​无​法​正​确​展​开​,所​以​必​须​使​用​ replace="false")。​请​注​意​,缓​存​加​载​器的​实​现​必​须​具​有​一​个​空​的​构​造​器​。properties 元​素​定​义​了​一​个​给​定​实​现​的​专​有​配​置​。​例​如​,基​于​文​件​系​统​的​实​现​定​义​了​所​使​用​的​根​目​录​, 而​数​据​库​实​现​则​定​义​了​建​立​连​接​所​需​的​数​据​库​ URL、​用​户​名​和​密​码​。​这​个​配​置​将​通​过CacheLoader.setConfig(Properties) 传​给​ CacheLoader 实​现​。​请​注​意​,空​格​可​能​需​要​使​用​脱​字符.

preload 允​许​我​们​定​义​一​个​节​点​列​表​、​甚​至​是​整​个​子​树​,缓​存​在​启​动​时​访​问​它​来​预​加​载​和​这​些​节​点​相​关​联的​数​据​。​缺​省​的​("/")将​把​后​台​存​储​里​的​所​有​时​间​加​载​到​缓​存​里​,如​果​后​台​数​据​很​多​,这​可​能​不​是​个​好​主​意。​例​如​,/a, /product/catalogue 只​把​子​树​ /a 和​ /product/catalogue 加​载​到​缓​存​里​。​在​访​问​时再​ lazily 加​载​其​他​东​西​。​当​需​要​频​繁​使​用​某​个​子​树​下​的​数​据​时​,预​加​载​就​很​有​用。
​
fetchPersistentState 决​定​在​加​入​群​集​时​是​否​获​取​缓​存​的​持​久​性​状​态​。​只​有​配​置​了​缓​存​加​载​器​的​缓​存才​能​把​这​个​属​性​设​置​为​ true;如​果​多​个​缓​存​加​载​器​设​置​了​它​,在​启​动​缓​存​服​务​时​将​抛​出​配​置​异​常。

async 决​定​对​缓​存​加​载​器​的​写​操​作​是​否​在​完​成​前​一​直​阻​塞​,或​者​在​单​独​的​线​程​运​行​,这​样​写​操​作​就​可​以​马​上返​回​。​如​果​设​置​为​ true, org.jboss.cache.loader.AsyncCacheLoader 实​例​和​将​使​用​的​实​际​的​缓存​加​载​器​实​例​一​起​被​构​建​。​然​后​ AsyncCacheLoader 把​所​有​请​求​都​委​托​给​底​层​的​缓​存​加​载​器​,并​在​必​要时​使​用​单​独​的​线​程​。​更​多​细​节​请​参​考​ AsyncCacheLoader 的​ Javadoc。​如​果​未​进​行​指​定​,async 元​素​缺省​为​ false。

NOTE: 既​然​所​有​的​写​操​作​都​是​异​步​执​行​的​,那​么​脏​读​总​是​有​可​能​发​生​的​,因​此​想​保​证​写​操​作​何​时​成​功​(甚​至​是​否​成​功​)是​不​可​能​的​。​在​把​ async 元​素​设​置​为​ true 时​,你​需​要​把​这​一​点​记​在​心​里​。

ignoreModifications 决​定​写​操​作​是​否​委​托​给​专​门​的​缓​存​加​载​器​。​这​可​能​发​生​在​当​临​时​的​应​用​程​序​数​据应​该​只​驻​留​在​相​同​服​务​器​上​的​作​为​内​存​缓​存​的​基​于​文​件​的​缓​存​加​载​器​里​时​,例​如​,网​络​里​所​有​服​务​器​使​用​的共​享​ JDBCCacheLoader。​这​个​功​能​允​许​你​写​入​“​本​地​”​文​件​缓​存​加​载​器​而​不​是​共​享​的​ JDBC 缓​存​加​载​器​。它​的​缺​省​值​为​ false,所​以​写​操​作​将​被​传​递​给​所​有​的​缓​存​加​载​器​。

purgeOnStatup 在​指​定​的​缓​存​加​载​器​启​动​时​清​空​它​(如​果​ ignoreModifications 为​ false)。

shared 表​示​缓​存​加​载​器​在​不​同​的​缓​存​实​例​间​共​享​,例​如​群​集​里​所​有​的​实​例​使​用​相​同​的​ JDBC 设​置​来​和​相​同的​远​程​共​享​数​据​库​进​行​通​讯​。​设​置​它​为​ true 阻​止​了​将​相​同​数​据​重​复​和​不​必​要​地​写​入​到​缓​存​加​载​器​里​。​它​的缺​省​值​是​ false。

* 9.2.1. 单点登录存储的配置 
---
<loaders passivation="false" shared="true">
<preload>
<node fqn="/a/b/c"/>
<node fqn="/f/r/s"/>
</preload>
<!-- we can now have multiple cache loaders, which get chained -->
<loader class="org.jboss.cache.loader.JDBCCacheLoader" async="false"
fetchPersistentState="false"
ignoreModifications="false" purgeOnStartup="false">
<properties>
cache.jdbc.datasource=java:/DefaultDS
</properties>
<singletonStore enabled="true"
class="org.jboss.cache.loader.SingletonStoreCacheLoader">
<properties>
pushStateWhenCoordinator=true
pushStateWhenCoordinatorTimeout=20000
</properties>
</singletonStore>
</loader>
</loaders>
---

数​据​进​入​到​某​个​节​点​时​,它​总​是​被​复​制​以​保​持​缓​存​的​内​存​状​态​同​步​;但​是​协​调​者​具​有​将​该​状​态​写​入​磁​盘​的​独立​责​任​。​这​个​功​能​可​以​通​过​设​置​ enabled 子​元​素​为​ true 来​激​活​,但​如​ loader 元​素​里​定​义​的​,只​有​群​集的​协​调​者​会​在​底​层​缓​存​加​载​器​里​存​储​这​些​修​改​。​你​不​能​将​缓​存​加​载​器​定​义​为​ shared 并​同​时​启​用 singletonStore。​enabled 的​缺​省​值​是​ false。

或​者​,在​ singletonStore 元​素​里​,你​也​可​以​定​义​一​个​ class 元​素​以​指​定​提​供​单​点​登​录​存​储​功​能​的​实​现类​。​这​个​类​必​须​继​承​ org.jboss.cache.loader.AbstractDelegatingCacheLoader,否​则​则​缺省​为​ org.jboss.cache.loader.SingletonStoreCacheLoader。

properties 子​元​素​定​义​的​属​性​允​许​修​改​提​供​单​点​登​录​存​储​功​能​的​类​的​行​为​。​在​缺​省​情​况​下​定​义​了pushStateWhenCoordinator 和​ pushStateWhenCoordinatorTimeout 属​性​,但​用​户​可​以​根​据​需要​添​加​更​多​的​属​性​。

pushStateWhenCoordinator 允​许​在​节​点​成​为​协​调​者​时​(由​于​群​集​拓​扑​结​构​的​改​变​而​产​生​新​的​协​调​者​)将​内​存​状​态​推​向​缓​存​存​储​。​当​协​调​者​崩​溃​且​新​的​协​调​者​还​未​及​出​现​时​,这​就​非​常​有​用​。​在​这​段​间​隔​中​, 如​果属​性​为​ false 且​缓​存​已​被​更​新​,这​些​修​改​将​不​会​被​持​久​化​。​设​置​这​个​属​性​为​ true 可​以​确​保​此​间​的​任​何​修改​都​会​存​储​在​缓​存​加​载​器​里​。​如​果​每​个​节​点​的​缓​存​加​载​器​都​配​置​为​处​于​不​同​的​位​置​,你​也​会​希​望​将​其​设​置​为 true。​它​的​缺​省​值​是​ true。

pushStateWhenCoordinatorTimeout 只​有​在​ pushStateWhenCoordinator 为​ true 时​才​有​效​。它​可​以​设​置​将​内​存​状​态​推​向​底​层​缓​存​加​载​器​需​要​的​最​大​毫​秒​数​,如​果​超​出​,将​抛​出PushStateException。​它​的​缺​省​值​为​ 20000。

* 使用 ​ singletonStore 元​素

 将​缓​存​加​载​器​设​置​为​单​点​登​录​并​使​用​缓​存​钝​化​(通​过​逐​出​)可​能​导​致​意​外​的​结​果​。​如​果​节​点​作​为​逐​出的​结​果​而​钝​化​,此​时​当​群​集​正​在​选​取​新​的​协​调​者​时​,数​据​就​会​丢​失​。​这​是​因​为​此​时​没​有​活​动​的​协​调​者, 从​而​使​群​集​里​没​有​任​何​节​点​会​储​存​被​钝​化​的​节​点​。​当​协​调​者​离​开​群​集​、​协​调​者​崩​溃​或​停​止​响​应​时​, 群​集​都​会​选​取​新​的​协​调​者​。

* 9.3. 附带的实现

下​面​是​ JBossCache 目​前​带​有​的​实​现​。

* 9.3.1. 基于文件系统的缓存加载​器

  JBoss Cache 附​带​几​个​将​文​件​系​统​用​于​存​储​空​间​的​缓​存​加​载​器​。​它​们​都​要​求​ <loader><properties> 配​置​元​素​包​含​一​个​ location 属​性​以​映​射​作​为​持​久​性​存​储​空​间​的​目​录​(如 location=/tmp/myDataStore)。​这​主​要​是​用​于​测​试​目​的​,我​们​不​推​荐​将​其​用​在​产​品​环​境​里​。
. FileCacheLoader 是​一​个​简​单​的​基​于​文​件​系​统​的​实​现​。​在​缺​省​情​况​下​,这​个​缓​存​加​载​器​检​查​当​前​位​置和​树​节​点​里​的​任​何​潜​在​字​符​移​植​性​问​题​,如​遇​到​无​效​的​字​符​则​参​加​产​生​警​告​信​息​。​通​过​添​加 check.character.portability 属​性​到​ <properties> 元​素​并​设​置​它​为​ false(如check.character.portability=false),可​以​禁​用​这​种​检​查​。FileCacheLoader 有​几​个​严​重​的​局​限​性​,从​而​限​制​了​它​在​产​品​环​境​里​的​使​用​。​或​者​如​果​将​它​用​在​这​样​的环​境​里​, 你​需​要​加​倍​小​心​且​对​这​些​局​限​性​有​着​足​够​的​理​解​。
.. 由​于​ FileCacheLoader 这​种​代​表​磁​盘​上​的​树​型​结​构​的​方​式​(目​录​和​文​件​),对​于​较​深​的​树​来​说​,横​向通​讯​是​低​效​的​。
.. 你​应​该​避​免​使​用​共​享​文​件​系​统​如​ NFS、​Windows 共​享​等​,因​为​它​们​都​没​有​实​现​正​确​的​文​件​锁​, 从​而会​导​致​数​据​崩​溃​。
.. 对​ NONE 隔​离​级​别​的​使​用​会​导​致​写​入​崩​溃​,因​为​多​个​线​程​会​试​图​写​入​同​一​个​文​件​。
.. 文​件​系​统​天​生​就​不​是​事​务​性​的​,所​以​试​图​在​事​务​性​上​下​文​里​使​用​缓​存​时​,写​入​文​件​出​错​(在​提​交​阶​段发​生​)就​无​法​恢​复​。

凭​经​验​来​说​,我​们​不​推​荐​在​高​并​行​性​、​事​务​性​和​压​力​强​的​环​境​里​使​用​ FileCacheLoader,而​仅​将​其​用​于测​试​。
 
. BdbjeCacheLoader 是​一​个​基​于​ Oracle/Sleepycat 的​ BerkeleyDB Java Edition 的​缓​存​加​载​器​实​现​。
. Jdbm CacheLoader 是​一​个​基​于​ JDBM 引​擎​(BerkeleyDB 的​快​速​和​免​费​的​替​代​方​案​)的​缓​存​加​载​器​实现​。

请​注​意​, BerkeleyDB 实​现​比​基​于​文​件​系​统​的​实​现​效​率​要​高​得​多​,而​且​它​提​供​事​务​性​保​证​。​但​是​,如​果​随​应用​程​序​发​行​,你​需​要​一​个​商​业​的​许​可​证​(相​关​细​节​请​参​考​ http://www.oracle.com/database/berkeley-db/index.html)。

* 9.3.2. 委​托其他缓存的缓存加载器
. LocalDelegatingCacheLoader,它​启​用​从​其​他​本​地​(同​一​虚​拟​机​内​)缓​存​里​加​载​或​进​行​存​储​。
. ClusteredCacheLoader,它​允​许​通​过​用​来​复​制​数​据​的​相​同​群​集​协​议​来​查​询​相​同​群​集​里​的​其​他​缓​存​的内​存​数​据​。​写​入​不会进​行​存​储​,因​为​复​制​将​负​责​所​需​的​任​何​更​新​。​你​需​要​指​定​一​个​ timeout 属​性​, 这个​长​整​型​值​告​诉​缓​存​加​载​器​在​获​取​群​集​响​应​前​该​等​待​多​久​(毫​秒​)才​假​定​为​空​值​。​例​如​, timeout = 3000 将​指​定​超​时​时​间​为​ 3 秒​。

* 9.3.3. JDBCCacheLoader

  JBossCache 带​有​一​个​基​于​ JDBC 的​ CacheLoader 实​现​,它​把​节​点​的​状​态​存​储​/加​载​到​关​系​型​数​据​库​里​。​这个​实​现​类​是​ org.jboss.cache.loader.JDBCCacheLoader。目​前​的​实​现​只​使​用​一​个​表​。​表​里​的​每​一​行​都​代​表​一​个​节​点​并​包​含​三​个​字​段​:
. Fqn 字​段​(主​键​字​段​)
. 节​点​内​容​字​段​(属​性​/值​对​)
. 父​ Fqn 字​段
Fqn 以​字​符​串​格​式​储​存​。​节​点​内​容​以​ BLOB 格​式​储​存​。

WARN: JBoss Cache 对​ Fqn 里​使​用​的​对​象​类​型​不​进​行​限​制​,但​这​个​缓​存​加​载​器​实​现​要​求​ Fqn 只​包​含​类​型为​ java.lang.String 的​对​象​。​Fqn 的​另​外​一​个​限​制​是​长​度​。​既​然​ Fqn 是​主​键​,它​的​缺​省​字​段​类型​是​ VARCHAR,它​存​储​的​文​本​值​的​最​大​长​度​取​决​于​相​应​的​数​据​库​。

*  JDBCCacheLoader 的配置

** 表的配置 
  表​和​字​段​名​以​及​字​段​类​型​都​是​可​配​置​的​,它​们​有​下​列​属​性​。
. cache.jdbc.table.tablename - 表​的​名​称​。​它​可​以​预​加​模​式​名​称:{schema_name}.{table_name}。​缺​省​值​为​ 'jbosscache'。
. cache.jdbc.table.primarykey - 表​的​主​键​名​称​。​缺​省​值​为​ 'jbosscache_pk'。
. cache.jdbc.table.create - 可​以​为​ false 或​ true。​表​示​是​否​在​启​动​时​创​建​表​。​如​果​为​ true, 如​果​表​不​存​在则​被​创​建​。​缺​省​值​为​ true。
. cache.jdbc.table.drop - 可​以​是​ true 或​ false。​表​示​是​否​在​启​动​时​删​除​表​。​缺​省​值​为​ true。
. cache.jdbc.fqn.column - FQN 字​段​名​称​。​缺​省​值​为​ 'fqn'。
. cache.jdbc.fqn.type - FQN 的​字​段​类​型​。​缺​省​值​为​ 'varchar(255)'。
. cache.jdbc.node.column - 节​点​内​容​的​字​段​名​称​。​缺​省​值​为​ 'node'。
. cache.jdbc.node.type - 节​点​内​容​的​字​段​类​型​。​缺​省​值​为​ 'blob'。​这​个​类​型​必​须​为​正​使​用​的​数​据​库​指​定​一个​有​效​的​二​进​制​数​据​类​型​。

** 数据源(DataSource)
  如​果​你​在​一​个​受​管​环​境​(如​应​用​服​务​器​)里​使​用​ JBossCache,你​可​以​指​定​想​使​用​的​数​据​源​的​ JNDI 名​称​。
. cache.jdbc.datasource - 数​据​源​的​ JNDI 名​称​。​缺​省​值​为​ java:/DefaultDS。

** JDBC 驱动
  如​果​你没有​使​用​数​据​源​而​使​用​ JDBC 驱​动​,你​需​要​配​置​下​列​的​属​性​。
. cache.jdbc.driver - JDBC 驱​动​的​全​限​定​名​称​。
. cache.jdbc.url - 连​接​数​据​库​所​使​用​的​ URL。
. cache.jdbc.user - 连​接​数​据​库​所​使​用​的​用​户​名​。
. cache.jdbc.password - 连​接​数​据​库​所​使​用​的​密​码​。

** c3p0 连接池
JBoss Cache 用​ c3p0:JDBC DataSources/Resource Pools 库​实​现​了​独​立​运​行​于​应​用​服​务​器​外​部​的​ JDBC 连​接​池​。​为​了​启​用​它​,你​只​需​编​辑​下​列​属​性​:
. cache.jdbc.connection.factory - 连​接​工​厂​类​的​名​称​。​如​果​未​设​置​,它​的​缺​省​值​是​标​准​的​非​池​化​实​现​。​要启​用​ c3p0 池​,可​将​这​个​类​设​置​为​ c3p0。​请​参​考​后​面​的​例​子​。

你​也​可​以​在​相​同​的​缓​存​加​载​器​属​性​部​分​设​置​任​何​ c3p0 参​数​,但​请​不​要​忘​记​属​性​名​字​应​以​ 'c3p0.' 开​始​。​要​找到​可​用​的​属​性​列​表​,请​访​问​ c3p0:JDBC DataSources/Resource Pools 里​关​于​ c3p0 库​版​本​的​文​档​。​而​且​, 为​了​提​供​尝​试​不​同​池​参​数​的​快​速​和​容​易​途​径​,这​些​属​性​都​可​以​通​过​系​统​属​性​来​设​置​以​覆​盖​ JBoss Cache XML 配​置​文​件​里​定​义​的​属​性​。​例​如​,-Dc3p0.m axPoolSize=20。​如​果​配​置​文​件​或​系​统​属​性​都​没​有​定​义 c3p0,那​么​它​将​采​用​文​档​里​提​到​的​缺​省​值​。

** 配置示例
下​面​是​一​个​以​ Oracle 为​数​据​库​的​ JDBC CacheLoader 示​例​。​CacheLoaderConfiguration XML 元​素​包​含​定义​数​据​库​相​关​配​置​的​属​性​。
----
<loaders passivation="false" shared="false">
<preload>
<node fqn="/some/stuff"/>
</preload>
<!-- if passivation is true, only the first cache loader is used; the rest
are ignored -->
<loader class="org.jboss.cache.loader.JDBCCacheLoader" async="false"
fetchPersistentState="true"
ignoreModifications="false" purgeOnStartup="false">
<properties>
cache.jdbc.table.name=jbosscache
cache.jdbc.table.create=true
cache.jdbc.table.drop=true
cache.jdbc.table.primarykey=jbosscache_pk
cache.jdbc.fqn.column=fqn
cache.jdbc.fqn.type=VARCHAR(255)
cache.jdbc.node.column=node
cache.jdbc.node.type=BLOB
cache.jdbc.parent.column=parent
cache.jdbc.driver=oracle.jdbc.OracleDriver
cache.jdbc.url=jdbc:oracle:thin:@localhost:1521:JBOSSDB
cache.jdbc.user=SCOTT
cache.jdbc.password=TIGER
</properties>
</loader>
</loaders>
----

作​为​配​置​整​个​ JDBC 连​接​的​替​代​,你​可​以​指​定​现​有​的​数​据​源​的​名​称​:
----
<loaders passivation="false" shared="false">
<preload>
<node fqn="/some/stuff"/>
</preload>
<!-- if passivation is true, only the first cache loader is used; the rest
are ignored -->
<loader class="org.jboss.cache.loader.JDBCCacheLoader" async="false"
fetchPersistentState="true"
ignoreModifications="false" purgeOnStartup="false">
<properties>
cache.jdbc.datasource=java:/DefaultDS
</properties>
</loader>
</loaders>
----

使​用​ c3p0 JDBC 连​接​池​的​缓​存​加​载​器​的​配​置​示​例​:
----
<loaders passivation="false" shared="false">
<preload>
<node fqn="/some/stuff"/>
</preload>
<!-- if passivation is true, only the first cache loader is used; the rest
are ignored -->
<loader class="org.jboss.cache.loader.JDBCCacheLoader" async="false"
fetchPersistentState="true"
ignoreModifications="false" purgeOnStartup="false">
<properties>
cache.jdbc.table.name=jbosscache
cache.jdbc.table.create=true
cache.jdbc.table.drop=true
cache.jdbc.table.primarykey=jbosscache_pk
cache.jdbc.fqn.column=fqn
cache.jdbc.fqn.type=VARCHAR(255)
cache.jdbc.node.column=node
cache.jdbc.node.type=BLOB
cache.jdbc.parent.column=parent
cache.jdbc.driver=oracle.jdbc.OracleDriver
cache.jdbc.url=jdbc:oracle:thin:@localhost:1521:JBOSSDB
cache.jdbc.user=SCOTT
cache.jdbc.password=TIGER
cache.jdbc.connection.factory=org.jboss.cache.loader.C3p0ConnectionFactory
c3p0.maxPoolSize=20
c3p0.checkoutTimeout=5000
</properties>
</loader>
</loaders>
----

* 9.3.4 . S3CacheLoader

  S3CacheLoader 使​用​ Amazon S3(Simple Storage Solution)来​存​储​缓​存​数​据​。​既​然​ Amazon S3 是​远程​的​网​络​存​储​空​间​且​具​有​相​当​长​的​延​迟​,它​对​于​存​储​大​型​数​据​如​媒​体​或​文​件​的​缓​存​来​说​就​是​最​佳​选​择​。​如​果你​需​要​远​程​管​理​的​、​高​度​可​靠​的​存​储​空​间​, 你​可​以​考​虑​到​这​个​缓​存​加​载​器​而​非​ JDBC 或​基​于​文​件​系​统​的​缓​存加​载​器​。​或​者​,你​可​以​将​其​用​于​运​行​在​ Amazon 的​ EC2 (Elastic Compute Cloud) 上​的​应​用​程​序​。

  如​果​你​计​划​采​用​ Amazon S3 为​存​储​空​间​,请​考​虑​将​其​和​ JBoss Cache 一​起​使​用​。​ JBoss Cache 自​身​也​提供​内​存​缓​存​以​最​小​化​远​程​调​用​, 从​而​减​少​了​延​迟​和​获​取​ Amazon S3 数​据​的​开​销​。​使​用​缓​存​复​制​,你​还​可​以从​本​地​群​集​加​载​数​据​而​无​需​每​次​都​进​行​远​程​访​问​。

  请​注​意​,Amazon S3 不​支​持​事​务​。​如​果​你​在​应​用​程​序​里​使​用​了​事​务​,那​么​在​使​用​缓​存​加​载​器​时​可​能​会​出​现状​态​的​不​一​致​。​然​而​,写​入​是​原​子​的​,因​此​如​果​写​入​失​败​,那​么​其​他​写​入​不​会​再​继​续​,数​据​也​就​不​会​毁​坏​。

  数​据​按​键​值​存​储​在​节​点​的​ FQN 上​,且​节​点​数​据​使​用​ CacheSPI.getMarshaller() 实​例​序​列​化​为 java.util.Map。​关​于​数​据​是​如​何​组​织​和​存​储​的​细​节​,请​参​考​ Javadoc。​数​据​是​通​过​ Java 序​列​化​来​存​储​的​。​请注​意​这​意​味​着​非​ JBoss Cache 客​户​无​法​通​过​ HTTP 访​问​数​据​。​我​们​欢​迎​你​的​反​馈​和​帮​助​来​扩​展​这​个​缓​存​加载​器​。
 
  使​用​这​个​缓​存​加​载​器​,单​键​操​作​如​ Node.rem ove(Object) 和​ Node.put(Object, Object) 将​是​最慢​的​,这​是​因​为​数​据​存​储​在​单​个​的​ Map 实​例​里​。​你​可​以​使​用​批​量​操​作​如​ Node.replaceAll(Map) 和 Node.clearData() 来​提​高​效​率​。​你​也​可​以​尝​试​ cache.s3.optimize 选​项​。

* Amazon S3 库 

  S3 缓​存​加​载​器​作​为​缺​省​的​组​件​提​供​,但​它​需​要​一​个​库​以​在​运​行​时​访​问​服​务​。​这​个​库​可​以​通​过​ Sourceforge Maven 库​来​获​取​。​请​在​你​的​ pom.xml 文​件​里​包​含​下​列​内​容​:
----
<repository>
<id>e-xml.sourceforge.net</id>
<url>http://e-xml.sourceforge.net/maven2/repository</url>
</repository>
...
<dependency>
<groupId>net.noderunner</groupId>
<artifactId>amazon-s3</artifactId>
<version>1.0.0.0</version>
<scope>runtime</scope>
</dependency>
----
如​果​你​没​有​使​用​ Maven,你​仍​然​可​以​通​过​这​个​网​址​下​载​ amazon-s3 库​。

* 配​置
最​少​,你​必​须​配​置​ Amazon S3 的​ access key 和​ secret access key。​下​面​的​配​置​ key 按​照​使​用​的​顺​序​列​出。
. cache.s3.accessKeyId - Amazon S3 Access Key,位​于​你​的​帐​号​配​置​里​。
. cache.s3.secretAccessKey - Amazon S3 Secret Access Key,位​于​你​的​帐​号​配​置​里​。​因​为​这​是​一个​密​码​,所​以​请​勿​分​发​或​在​构​建​软​件​里​包​含​它​。
. cache.s3.secure - 缺​省​值​为​ false: 在​公​共​网​络​里​不​加​密​地​传​输​。​设​置​为​ true 以​使​用​ HTTPS。请​注​意​,不​加​密​地​上​传​和​下​载​会​占​用​更​少​的​ CPU 资​源​。
. cache.s3.bucket - 存​储​数​据​的​ bucket 名​称​。​对​于​使​用​相​同​的​ Access Key 的​不​同​缓​存​,请​使​用​不​同的​ bucket 名​称​。​请​阅​读​关​于​ bucket 定​义​的​ S3 文​档​。​它​的​缺​省​值​是​ jboss-cache。
. cache.s3.callingForm at - PAT H、​S UBDOMAIN 或​ VANIT Y 中​的​一​个​。​请​阅​读​关​于​调​用​域​的​ S3 文​档​。​它​的​缺​省​值​是​ SUBDOMAIN。
. cache.s3.optim ize - 它​的​缺​省​值​是​ false。​如​果​为​ true,put(Map) 操​作​将​替​代​存​储​在​ FQN 上​的数​据​而​不​是​试​图​获​取​并​合​并​(这​个​操​作​目​前​还​是​实​验​性​的​)。
. cache.s3.parentCache - 它​的​缺​省​值​是​ true。​如​果​你​在​使​用​共​享​相​同​ S3 bucket 的​多​个​缓​存​并​删除​其​他​缓​存​里​创​建​的​节​点​的​父​节​点​,你​可​将​它​设​置​为​ false(这​种​情​况​不​常​见​)。JBoss Cache 以​树​型​格​式​存​储​节​点​并​按​需​要​自​动​创​建​中​间​的​父​节​点​。​S3 缓​存​加​载​器​也​创​建​这​些​父​节​点​以允​许​ getChildrenNames 操​作​正​确​工​作​。​对​于​每​个​ put 操​作​都​检​查​是​否​存​在​父​节​点​的​代​价​是​相​当​高的​,所​以​在​缺​省​情​况​下​缓​存​加​载​器​会​缓​存​这​些​父​节​点​的​存​在​情​况​。
. cache.s3.location - 它​为​你​的​数​据​选​择​主​要​的​存​储​位​置​以​减​少​加​载​和​获​取​的​延​迟​。​设​置​其​为​ EU 来将​数​据​存​储​在​欧​洲​。​它​的​缺​省​值​是​ null,就​是​存​储​在​美​国​。

* 9.3.5. TcpDelegatingCacheLoader

  这​个​缓​存​加​载​器​允​许​把​加​载​和​存​储​委​托​给​另​外​一​个​ JBossCache 实​例​,它​可​以​驻​留​在​(a)相​同​的​地​址​空​间, (b)在​同​一​主​机​的​不​同​进​程​里​,或​(c)在​不​同​主​机​的​不​同​进​程​里​。

  TcpDelegatingCacheLoader 和​远​程​的​ org.jboss.cache.loader.tcp.T cpCacheServer (可​以​是独​立​的​进​程​或​嵌​入​在​ JBoss 里​的​ MBean)通​讯​。​TcpCacheServer 具​有​对​其​他​ JBossCache 的​引​用​,这​可​以​是​自​己​创​建​的​,或​者​其​他​实​例​给​予​的​(如​ JBoss 通​过​依​赖​性​注​入​)。

  从​ JBoss Cache 2.1.0 开​始​,如​果​到​ TcpCacheServer 的​连​接​丢​失​,TcpDelegatingCacheLoader 将透​明​地​处​理​重​连​接​。

. T cpDelegatingCacheLoader 用​远​程​ T cpCacheServer 的​主​机​和​端​口​进​行​配​置​,并​用​之​进​行​通​讯​。​此​外​, 两个​新​的​可​选​参​数​也​被​用​于​控​制​和​ TcpCacheServer 的​透​明​的​重​连​接​。​timeout 属​性​(缺​省​为​ 5000)指​定缓​存​在​放​弃​并​抛​出​异​常​前​必​须​尝​试​连​接​ TcpCacheServer 的​时​间​长​度​。​reconnectWaitTime 属​性​(缺​省为​ 500)是​缓​存​加​载​器​在​检​测​到​通​讯​故​障​时​试​图​重​连​接​前​应​该​等​待​的​时​间​。​最​后​这​两​个​参​数​可​以​用​来​为​缓​存加​载​器​添​加​一​个​容​错​级​别​,以​处​理​ T cpCacheServer 的​重​启​。
 
其​配​置​类​似​于​:
----
<loaders passivation="false" shared="false">
<preload>
<node fqn="/"/>
</preload>
<!-- if passivation is true, only the first cache loader is used; the rest
are ignored -->
<loader class="org.jboss.cache.loader.TcpDelegatingCacheLoader">
<properties>
host=myRemoteServer
port=7500
timeout=10000
reconnectWaitTime=250
</properties>
</loader>
</loaders>
----
这​表​示​这​个​ JBossCache 实​例​将​把​所​有​加​载​和​存​储​请​求​委​托​给​运​行​在​ myRem oteServer:7500 上​的​远​程TcpCacheServer。

典​型​的​用​例​就​是​相​同​群​集​里​的​多​个​复​制​性​ JBossCache 实​例​,都​委​托​给​相​同​的​ TcpCacheServer 实​例​。TcpCacheServer 自​身​可​能​通​过​ JDBCCacheLoader 委​托​给​数​据​库​,但​要​注​意​的​是​ - 如​果​我​们​有​ 5 个​节​点​都在​访​问​相​同​数​据​集​ - 它​们​将​从​ TcpCacheServer 载​入​数​据​,每​次​卸​载​数​据​集​时​都​需​要​执​行​一​个​ SQL 语​句​。如​果​节​点​直​接​访​问​数​据​库​,那​么​我​们​得​多​次​执​行​相​同​的​ SQL 语​句​。​所​以​, TcpCacheServer 充​当​数​据​库(假​设​网​络​往​返​通​信​比​数​据​库​访​问​更​快​,因​为​数​据​库​访​问​通​常​也​包​含​一​次​网​络​通​信​)前​面​的​一​个​自​然​缓​存​。

为​了​降​低​单​点​故​障​的​发​生​, 我​们​可​以​使​用​多​个​缓​存​加​载​器​。​其​中​的​第​一​个​ CacheLoader 是​一​个 ClusteredCacheLoader, 第​二​个​是​ TcpDelegatingCacheLoader, 最​后​一​个​是​ JDBCacheLoader, 这​有​效地​按​照​代​价​递​增​的​顺​序​定​义​了​对​缓​存​的​访​问​。

* 9.3.6. 转换缓存加载器

  缓​存​数​据​写​入​基​于​ FileCacheLoader 和​ JDBCCacheLoader 的​缓​存​库​的​方​式​在​ JBoss Cache 2.0 里已​经​进​行​了​修​改​, 这​些​缓​存​加​载​器​现​在​使​用​和​网​络​间​复​制​数​据​相​同​的​编​码​框​架​进​行​写​入​和​读​取​数​据​。​这​样​的改​变​对​于​复​制​目​的​而​言​是​无​关​紧​要​的​, 因​为​它​只​要​求​其​他​节​点​理​解​这​种​格​式​。​然​而​,修​改​缓​存​库​里​的​数​据​格式​会​带​来​一​个​新​问​题​: 将​数​据​以​ JBoss Cache 1.x.x 格​式​存​储​的​用​户​如​何​移​植​这​些​库​到​到​ JBoss Cache 2.0 格​式​呢​?

  为​此​, JBoss Cache 2.0 附​带​了​两​个​缓​存​加​载​器​实​现​,分​别​为​可​选​ jbosscache-cacheloader-migration.jar 文​件​里​的​ org.jboss.cache.loader.TransformingFileCacheLoader 和 org.jboss.cache.loader.Transform ingJDBCCacheLoader。​这​些​都​是​一​次​性​的​缓​存​加​载​器​, 它​们​从​缓​存​库​里​读​取​ JBoss Cache 1.x.x 格​式​的​数​据​并​以​ JBoss Cache 2.0 格​式​写​入​到​缓​存​库​里​。

  有​一​个​办​法​是​,用​户​修​改​现​有​的​缓​存​配​置​以​使​用​这​些​缓​存​加​载​器​并​为​其​创​建​一​个​创​建​缓​存​实​例​的​ Java 小​程序​, 递​归​地​读​取​整​个​缓​存​并​回​写​至​缓​存​里​。​一​旦​转​换​了​数​据​, 用​户​可​以​用​回​原​来​的​缓​存​配​置​。​为​了​帮​助​用​户完​成​这​个​任​务​, 我​们​在​ examples/cacheloader-migration 目​录​里​构​建​了​一​个​缓​存​加​载​器​的​移​植​示例​。​这​个​例​子​名​为​ examples.Transform Store, 它​独​立​于​缓​存​里​存​储​的​实​际​数​据​, 因​为​它​回​写​一​切​递归​地​读​取​的​内​容​。​我​们​强​烈​推​荐​对​移​植​数​据​感​兴​趣​的​用​户​首​先​运​行​这​个​例​子​(它​的​ readme.txt 含​有​详​细信​息​),也​可​以​将​它​作​为​应​用​程​序​的​基​础​。

* 9.4. 缓存钝化

  缓​存​加​载​器​可​以​用​于​在​缓​存​里​逐​出​时​强​制​节​点​钝​化​和​激​活​。

  缓存钝化(Cache Passivation)是​在​逐​出​时​从​内​存​缓​存​里​删​除​对​象​并​将​其​写​入​到​二​级​数​据​存​储​(如​文​件​系​统、​数​据​库​)里​的​过​程​。缓存激活(Cache Activation)是​在​需​要​时​从​数​据​存​储​里​把​对​象​恢​复​到​内​存​缓​存​里​的过​程​。​在​两​种​情​况​下​,所​配​置​的​缓​存​加​载​器​都​被​用​来​从​/向​数​据​存​储​读​取​/写​入​。

  当​所​实​施​的​逐​出​策​略​从​缓​存​里​逐​出​节​点​时​,如​果​启​用​了​钝​化​,节​点​正​被​钝​化​的​通​知​将​被​发​送​给​ cache listener, 该​节​点​及​其​子​节​点​将​被​存​储​在​缓​存​加​载​器​存​储​里​。​当​用​户​获​取​早​前​被​逐​出​的​节​点​时​, 该​节​点​将​从​缓存​加​载​器​存​储​中​加​载​(lazy 方​式​)到​内​存​缓​存​里​。​当​该​节​点​及​其​子​节​点​已​经​被​加​载​后​, 它​们​将​从​缓​存​加​载​器里​删​除​并​发​送​节​点​被​激​活​的​通​知​到​ cache listener。

  要​启​用​缓​存​的​钝​化​/激​活​,你​可​以​设​置​ passivation 为​ true。​它​的​缺​省​值​为​ false。​当​使​用​钝​化​时​, 只​有配​置​的​第​一​个​缓​存​加​载​器​将​被​使​用​。​其​他​的​都​会​被​忽​略​。

* 9.4.1. 启​用​/禁​用​钝​化​时​缓​存​加​载​器​的​行​为​对​比

  当​禁​用​钝​化​时​,每​当​修​改​、​添​加​、​删​除​了​元​素​,这​种​变​动​就​通​过​缓​存​加​载​器​持​久​化​到​后​台​存​储​里​。​逐​出​和​缓存​加​载​没​有​直​接​的​关​系​。​如​果​你​没​有​使​用​逐​出​, 持​久​化​存​储​里​的​内​容​基​本​上​是​内​存​里​的​拷​贝​而​已​。​如​果​你​使用​了​逐​出​,持​久​化​存​储​里​的​内​容​基​本​上​是​内​存​的​超​集​(也​就​是​说​,它​包​含​了​已​从​内​存​里​逐​出​的​节​点​)。当​启​用​钝​化​时​,逐​出​和​缓​存​加​载​就​有​了​直​接​的​关​系​。​通​过​缓​存​加​载​器​对​持​久​性​存​储​的​写​入​只​会​作​为​逐​出​过​程的​一​部​分​发​生​。​当​应​用​程​序​将​数​据​读​取​回​内​存​时​,数​据​将​从​持​久​性​存​储​里​删​除​。​此​时​,内​存​和​持​久​性​存​储​里的​内​容​是​总​的​信​息​的​两​个​子​集​,且​两​者​间​没​有​交​集​。

  下​面​是​一​个​简​单​的​例​子​,它​展​示​了​ 6 个​步​骤​里​的​每​个​步​骤​后​ RAM 和​持​久​性​存​储​里​的​状​态​:
. 插​入​ /A
. 插​入​ /B
. 逐​出​线​程​运​行​,逐​出​ /A
. 读​取​ /A
. 逐​出​线​程​运​行​,逐​出​ /B
. 删​除​ /B

禁​用​钝​化​时​:
----
1) Memory: /A Disk: /A
2) Memory: /A, /B Disk: /A, /B
3) Memory: /B Disk: /A, /B
4) Memory: /A, /B Disk: /A, /B
5) Memory: /A Disk: /A, /B
6) Memory: /A Disk: /A
----
启​用​钝​化​时​:
----
1) Memory: /A Disk:
2) Memory: /A, /B Disk:
3) Memory: /B Disk: /A
4) Memory: /A, /B Disk:
5) Memory: /A Disk: /B
6) Memory: /A Disk:
----

* 9.5. 策略
本​节​讨​论​了​合​并​不​同​的​缓​存​加​载​器​类​型​和​配​置​选​项​以​实​现​特​定​结​果​的​不​同​模​式​。

* 9.5.1. 带有存储的本地缓存
  这​是​最​简​单​的​情​况​。​我​们​有​一​个​模​式​为​ LOCAL 的​ JBoss Cache 实​例​,因​此​不​会​进​行​任​何​复​制​。​缓​存​加​载​器只​是​简​单​地​从​存​储​加​载​ non-existing 元​素​并​将​修​改​写​入​存​储​里​。​当​启​动​缓​存​时​,根​据​ preload 元​素​某​些​数据​将​被​预​先​加​载​, 因​此​缓​存​可​以​部​分​地​热​身​。

* 9.5.2. 共​享​相​同​存​储​的​复​制​性​缓​存
下​面​的​图​例​显​示​了​共​享​相​同​后​台​存​储​的​两​个​ JBossCache 实​例​:

  Figure 3--共​享​后​台​存​储​的​两​个​节​点

这​个​两​个​节​点​都​有​访​问​共​用​后​台​存​储​的​缓​存​加​载​器​。​例​如​,这​可​以​是​一​个​共​享​文​件​系​统​(使​用 FileCacheLoader)或​共​享​的​数​据​库​。​因​为​两​个​节​点​都​访​问​相​同​的​存​储​,所​以​他​们​在​启​动​时​并​不​需​要​状​态​转移​。

NOTE: 当​然​如​果​它​们​在​启​动​后​想​有​一​个​ warm 或​ hot 的​缓​存​,它​们​也​可​以​启​用​状​态​转​移​。

FetchInMem oryState 属​性​可​以​设​置​为​ false 来​设​置​ 'cold' 缓​存​,当​元​素​第​一​次​被​访​问​和​加​载​开​始​,它​会逐​渐​热​身​。​这​意​味​着​群​集​里​的​单​个​缓​存​在​任​何​给​定​时​间​可​以​有​不​同​的​内​存​状​态​(很​大​程​度​取​决​于​它​们​的​预​加载​和​逐​出​策​略​)。

当​存​储​值​时​,写​入​者​将​负​责​在​后​台​存​储​里​存​储​修​改​。​例​如​,如​果​ node1 进​行​了​修​改​ C1 而​ node2 的​修​改​为C2,那​么​ node1 将​告​诉​其​缓​存​加​载​器​来​存​储​ C1,而​ node2 将​告​诉​其​缓​存​加​载​器​来​存​储​ C2。

* 9.5.3. 只​有​单​一​节​点​具​有​后​台​存​储​的​复​制​性​缓​存

  Firgure 3- 两​个​节​点​中​只​有​一​个​可​访​问​后​台​存​储

这​和​前​面​的​情​况​类​似​,但​只​有​一​个​节​点​通​过​其​缓​存​加​载​器​和​后​台​存​储​交​互​。​所​有​其​他​节​点​执​行​内​存​复​制​。​所有​应​用​程​序​的​状​态​都​保​存​在​每​个​节​点​里​, 而​多​个​缓​存​的​存​在​则​使​数​据​高​度​可​用​(这​假​定​了​需​要​数​据​的​客​户​端能​够​从​一​个​缓​存​失​效​切​换​到​另​外​一​个​)。​然​后​单​一​的​持​久​性​后​台​存​储​提​供​了​群​集​崩​溃​或​需​要​重​启​时​数​据​的​备份​。

请​注​意​,对​于​缓​存​加​载​器​来​说​,异​步​地​存​储​修​改​也​是​有​其​用​途​的​,那​就​是不​在​调​用​这​线​程​进​行​,为​的​是​不​会因​为​访​问​数​据​库​(假​设​)而​降​低​群​集​效​率​。​而​使​用​同​步​复​制​的​话​,这​不​会​成​为​问​题​。

这​个​架​构​的​一​个​弱​点​是​具​有​缓​存​加​载​器​的​缓​存​是​唯​一​的​故​障​点​。​而​且​,如​果​群​集​重​启​,缓​存​必​须​首​先​启​动(容​易​被​忘​记​)。​解​决​办​法​是​为​每​个​节​点​配​置​一​个​缓​存​加​载​器​,但​把​ singletonStore 属​性​设​置​为true。​这​样​,有​且​只​有​一​个​节​点​将​总​是​写​入​到​持​久​性​存​储​里​。​然​而​,这​会​使​重​启​问​题​更​为​复​杂​,因​为​在​启​动之​前​你​需​要​决​定​哪​个​缓​存​在​关​闭​/失​效​前​正​在​写​入​,然​后​先​启​动​该​缓​存​。

* 9.5.4. 每​个​节​点​都​有​自​己​的​存​储​的​复​制​性​缓​存

  Figure 3- 两​个​节​点​都​有​自​己​的​后​台​存​储

每​个​节​点​都​有​自​己​的​数​据​库​。​对​缓​存​的​修​改​将​被​(a)跨​群​集​进​行​复​制​(b)用​ CacheLoader 进​行​持​久​化​。这​意​味​着​所​有​的​数​据​存​储​都​具​有​刚​好​相​同​的​状​态​。​当​在​事​务​里​同​步​地​复​制​性​修​改​时​,两​阶​段​提​交​协​议​负​责​复制​所​有​的​修​改​并​持​久​化​在​各​自​的​数​据​存​储​里​,或​者​都​不​复​制​和​持​久​化​(原​子​的​更​新​)。

请​注​意​,JBossCache 目​前​还不​是​ XAResource,也​就​是​说​它​不​能​实​现​恢​复​(Recovery)。​当​和​支​持​恢​复​的事​务​管​理​者​(Transaction Manager)一​起​使​用​时​, 这​个​功​能​是​不​可​用​的​。

这​里​的​问​题​是​状​态​转​移​:当​新​节​点​启​动​时​,它​需​要​完​成​下​列​事​情​:
. 告​诉​协​调​者​(群​集​里​的​最​老​的​节​点​)向​其​发​送​状​态​。​这​总​是​完​整​的​状​态​转​移​,覆​盖​现​有​的​任​何​状​态​。
. 协​调​者​然​后​需​要​等​待​,知​道​所​有​事​务​已​经​完​成​。​在​此​期​间​,它​不​会​允​许​启​动​新​的​事​务​。
. 然​后​,协​调​者​将​用​ loadEntireState() 向​其​缓​存​加​载​器​请​求​完​整​的​状​态​。​它​然​后​把​状​态​回​送​给​新的​节​点​。
. 新​的​节​点​然​后​告​诉​它​的​缓​存​加​载​器​把​这​个​状​态​存​储​在​自​己​的​存​储​里​,并​覆​盖​旧​的​状​态​。​这​使​用​了 CacheLoader.storeEntireState() 方​法​。
. 在​状​态​转​移​过​程​中​,作​为​一​个​可​选​步​骤​,临​时​(内​存​)状​态​也​可​以​被​转​移​。
. 新​的​节​点​现​在​在​其​后​台​存​储​里​具​有​和​群​集​里​其​他​任​何​节​点​相​同​的​状​态​了​,从​其​他​节​点​接​收​的​的​修​改​将用​本​地​的​缓​存​加​载​来​持​久​化​。

* 9.5.5. 分层的缓存
如​果​你​想​在​同​一​虚​拟​机​里​设​立​分​层​缓​存​,你​可​以​使​用​ LocalDelegatingCacheLoader。​这​种​类​型​的​分层​缓​存​目​前​只​能​在​程​序​里​设​立​。

通​过​设​置​ T cpDelegatingCacheLoader,分​层​缓​存​也​可​以​跨​越​多​个​ JVM 或​服​务​器​。

  Figure 3- TcpDelegatingCacheLoader

* 9.5.6. 多个缓存加载器
你​可​以​在​一​个​链​里​设​置​多​个​缓​存​加​载​器​。​在​内​部​系​统​使​用​了​委​托​的​ ChainingCacheLoader,这​和​你​配​置的​每​个​缓​存​加​载​器​相​关​。​用​例​根​据​链​里​使​用​的​缓​存​加​载​器​的​类​型​不​同​而​不​同​。​一​个​例​子​是​使​用​基​于​文​件​系​统的​缓​存​加​载​器​,在​相​同​主​机​上​和​ JVM 共​存​,并​用​作​内​存​的​溢​出​。​这​确​保​了​数​据​相​对​容​易​可​用​并​具​有​较​低​消耗​。​另​外​一​个​远​程​的​缓​存​加​载​器​ TcpDelegatingCacheLoader 提​供​了​服​务​器​重​启​间​的​恢​复​能​力​。

 Figure 3- 链​里​的​多​个​缓​存​加​载​器

10 逐出 ​(Eviction)
++++++++++++++++++

通​过​限​制​内​存​里​的​节​点​数​目​以​及​存​在​的​时​间​,逐​出​(Eviction)控​制​着​ JBoss Cache 的​内​存​管​理​。​服​务​器​上的​内​存​限​制​意​味​着​缓​存​无​法​无​限​度​地​增​长​,所​以​需​要​利​用​逐​出​来​阻​止​内​存​的​溢​出​。​逐​出​经​常​和​『​第 9 章 缓存加载器​』​一​起​使​用​。

* 10.1. 设计 

  JBoss Cache 的​逐​出​围​绕​着​下​列​ 4 个​概​念​进​行​设​计​:
. 收​集​统​计​信​息
. 决​定​应​该​逐​出​哪​些​节​点
. 如​何​逐​出​节​点
. Eviction 线​程

此​外​,区​(Region)也​扮​演​着​关​键​的​角​色​,逐​出​总​是​以​区​为​单​位​进​行​配​置​,这​样​缓​存​里​不​同​的​子​树​就​可​以​具有​不​同​的​逐​出​策​略​。

** 收​集​统​计​信​息
  每​当​调​用​者​和​缓​存​进​行​交​互​,统​计​就​在​调​用​者​线​程​上​完​成​。​如​果​启​用​了​逐​出​,EvictionInterceptor 会被​加​入​到​拦​截​器​链​,而​事​件​会​记​录​在​事​件​队​列​里​。​事​件​是​由​ EvictionEvent 类​表​示​的​。​事​件​队​列​保​留​在特​定​的​区​里​,所​以​每​个​区​都​有​自​己​的​事​件​队​列​。

  逐​出​的​这​个​方​面​不​是​可​配​置​的​,除​非​将​ EvictionInterceptor 添​加​到​拦​截​器​链​或​取​决​于​是​否​启​用​了​逐​出。

** 决​定​要​逐​出​哪​些​节​点

  EvictionAlgorithm 实​现​处​理​逐​出​队​列​以​节​点​逐​出​哪​些​节​点​。​JBoss Cache 附​带​大​量​的​实​现​, 包​括FIFOAlgorithm 、​LRUAlgorithm 、​LFUAlgorithm 等​。​每​个​实​现​都​有​一​个​对​应​的​配​置​算​法​细​节​的 EvictionAlgorithm Config 实​现​。

  自​定​义​的​ EvictionAlgorithm 实​现​可​以​通​过​实​现​接​口​或​继​承​现​有​的​实​现​来​提​供​。

  调​用​算​法​的​ process() 方​法​并​传​入​要​处​理​的​事​件​队​列​可​以​执​行​算​法​。​这​通​常​是​通​过​调​用 Region.processEvictionQueues() 来​实​现​的​,它​将​定​位​分​配​到​该​区​的​算​法​。

** 节​点​逐​出​的​方​式

  一​旦​ EvictionAlgorithm 决​定​了​哪​些​节​点​要​逐​出​,它​将​使​用​一​个​ EvictionActionPolicy 实​现​来​决定​如​何​逐​出​这​些​节​点​。​这​是​对​每​个​区​进​行​配​置​的​,缺​省​值​为​ DefaultEvictionActionPolicy,它​对​需要​逐​出​的​每​个​节​点​调​用​ Cache.evict()。

** JBoss Cache 也​附​带​ Rem oveOnEvictActionPolicy,它​对​需​要​逐​出​的​每​个​节​点​调​用 Cache.removeNode() 而​不​是​ Cache.evict()。

  你​也​可​以​使​用​自​定​义​的​ EvictionActionPolicy 实​现​。

** 逐出线程

  在​缺​省​情​况​下​,我​们​使​用​一​个​缓​存​范​围​的​逐​出​线​程​来​定​期​迭​代​已​注​册​的​区​并​对​每​个​区​调​用 Region.processEvictionQueues()。​这​个​线​程​运​行​的​频​率​可​以​用​ eviction 配​置​元​素​里​的 wakeUpInterval 属​性​来​配​置​,如​果​没​有​指​定​,其​缺​省​值​是​ 5000 毫​秒​。

  设​置​ wakeUpInterval 为​ 0 可​以​禁​用​逐​出​线​程​。​如​果​你​要​使​用​自​己​的​定​期​维​护​线​程​并​想​通​过​区​来​迭​代​且​自己​调​用​ Region.processEvictionQueues(),那​这​很​有​用​处​。

* 10.2. 逐出区 

  在​谈​及​编​码​(marshalling)时​,区​的​概​念​和​ Region 类​都​是​『​第 7.6 节 “类​加​载​和​区​”』​里​提​到​的​。​区​也​用来​定​义​其​中​节​点​的​逐​出​行​为​。​除​了​使​用​区​专​有​的​配​置​,你​也​可​以​为​不​在​预​定​义​区​里​的​节​点​或​者​你​希​望​定​义​专有​的​区​时​配​置​缺​省​的​、​群​集​范​围​的​逐​出​行​为​。​请​注​意​,当​用​ XML 配​置​文​件​定​义​区​时​,定​义​区​的​ Fqn 的​元​素都​是​ String 对​象​。

  对​于​每​个​区​,你​都​可​以​定​义​逐​出​参​数​。

  你​也​可​以​定​义​重​叠​的​区​。​换​句​话​说​,一​个​区​可​以​定​义​为​ /a/b/c,而​另​外​一​个​可​定​义​为​ /a/b/c/d(d 是/a/b/c 的​子​树​)。​为​了​处​理​这​种​情​况​,算​法​将​总​是​选​取​它​遇​到​的​第​一​个​区​。​这​样​,如​果​算​法​需​要​决​定​如​何处​理​节​点​ /a/b/c/d/e,它​将​从​这​里​开​始​并​上​溯​至​第​一​个​已​定​义​的​区​ - 这​个​例​子​里​是​ /a/b/c/d。

** 驻​留​的​节​点

  当​逐​出​策​略​检​查​是​否​触​发​逐​出​和​处​理​实​际​的​逐​出​时​, 标​记​为​驻​留​(使​用​ Node.setResident() API)的​节点​将​被​忽​略​。例​如​,如​果​配​置​某​个​区​最​多​拥​有​ 10 个​节​点​,当​决​定​是​否​逐​出​该​区​里​的​节​点​时​,驻​留​节​点​不​会被​计​数​。​此​外​,当​已​到​达​该​区​的​逐​出​上​限​时​,也​不​会​考​虑​逐​出​这​些​驻​留​节​点​。

  为​了​标​记​某​个​节​点​为​驻​留​, 我​们​需​要​使​用​ Node.setResident() API。​在​缺​省​情​况​下​, 最​新​创​建​的​节​点​不会​是​驻​留​节​点​。​节​点​的​ resident 属​性​不​会​被​复​制​、​持​久​化​,也​不​是​ transaction-aware 的​。

这​个​驻​留​节​点​的​例​子​将​确​保​ "path" 节​点​不​在​逐​出​策​略​里​添​加​ "noise", 如​:
----
Map lotsOfData = generateData();
cache.put("/a/b/c", lotsOfData);
cache.getRoot().getChild("/a").setResident(true);
cache.getRoot().getChild("/a/b").setResident(true);
----

在​这​个​例​子​里​,节​点​ /a 和​ /a/b 都​是​单​独​存​在​的​路​径​以​支​持​节​点​ /a/b/c 的​存​在​, 它​们​没​有​保​留​任​何​自​己的​数​据​。​因​此​,它​们​是​不​错​的​驻​留​节​点​候​选​者​。​这​会​导​致​更​佳​的​内​存​管​理​,因​为​在​访​问​ /a 和​ /a/b 时​没​有逐​出​事​件​生​成​。

NOTE: 当​添​加​属​性​到​驻​留​节​点​时​,如​上​面​例​子​里​的​ cache.put("/a", "k", "v"),再​次​将​这​些​标​记​为非​驻​留​节​点​、​使​其​可​以​逐​出​是​有​道​理​的​。

* 10.3. 逐出配置

** 基本配置

  基​本​的​逐​出​配​置​元​素​类​似​于​:
----
<eviction wakeUpInterval="500" eventQueueSize="100000">
<default algorithmClass="org.jboss.cache.eviction.LRUAlgorithm">
<property name="maxNodes" value="5000" />
<property name="timeToLive" value="1000" />
</default>
</eviction>
----
. wakeUpInterval - 这​个​必​需​参​数​定​义​了​逐​出​线​程​运​行​的​频​率​,以​毫​秒​为​单​位​。
. eventQueueSize - 这​个​可​选​参​数​定​义​了​保​留​逐​出​事​件​的​绑​定​队​列​的​大​小​。​如​果​你​的​逐​出​线​程​不​是​经​常运​行​, 你​可​能​发​现​这​个​队​列​容​易​充​满​。​此​时​有​必​要​使​逐​出​线​程​运​行​得​更​为​频​繁​,或​者​增​大​这​个​对​列​。​这个​配​置​只​是缺省的​ 事​件​队​列​大​小​,在​特​定​的​区​里​可​以​将​其​覆​盖​。​如​果​没​有​指​定​,它​的​缺​省​值​为200000。
. algorithm Class - 这​是​一​个​必​需​的​属​性​,除​非​你​为​每​个​区​设​置​了​单​独​的​ algorithm Class 属​性​。它​定​义​了​缺​省​的​逐​出​算​法​。
. 算​法​配​置​属​性​ - 这​些​是​ algorithm Class 里​指​定​的​算​法​所​专​有​的​。​详​情​请​参​考​和​你​感​兴​趣​的​算​法​相​关的​章​节​。

** 在​程​序​里​进​行​配​置

  用​ Configuration 对​象​配​置​逐​出​会​使​用​ org.jboss.cache.config.EvictionConfig bean,它将​被​传​入​ Configuration.setEvictionConfig()。​关​于​在​程​序​里​构​建​ Configuration 的​更​多​信息​,请​参​考​『​第 3 章 配置​』​。

  使​用​简​单​的​ POJO Bean 来​代​表​缓​存​配​置​里​的​所​有​元​素​也​使​得​在​缓​存​启​动​前​在​程​序​里​添​加​逐​出​区​变​得​相​当​容易​了​。​例​如​,假​设​我​们​有​一​个​用​ XML 配​置​的​缓​存​,它​有​一​个​上​面​所​述​的​ EvictionConfig 元​素​。​现​在​我​们​希望​在​运​行​时​使​用​ LRUAlgorithm 和​不​同​数​量​的​ m axNodes 添​加​一​个​名​为​ "/org/jboss/fifo" 的​逐​出​区​:
----
Fqn fqn = Fqn.fromString("/org/jboss/fifo");
// Create a configuration for an LRUPolicy
LRUAlgorithmConfig lruc = new LRUAlgorithmConfig();
lruc.setMaxNodes(10000);
// Create an eviction region config
EvictionRegionConfig erc = new EvictionRegionConfig(fqn, lruc);
// Create the region and set the config
Region region = cache.getRegion(fqn, true);
region.setEvictionRegionConfig(erc);
----

* 10.4 附​带​的​逐​出​策​略​(Eviction Policy)

本​节​详​述​ JBoss Cache 附​带​的​不​同​算​法​以​及​用​于​每​个​算​法​的​配​置​参​数​。

**  LRUAlgorithm - 最近最少使用的
  org.jboss.cache.eviction.LRUPolicy 控​制​节​点​的​生​存​时​间​以​及​已​运​行​时​间​。​对​于​添​加​、​删​除​和​查找​(访​问​),这​个​策​略​保​证​不​变​的​顺​序​(O (1))。​它​具​有​下​列​的​配​置​参​数​:
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​, -1 表​示​无​限​制​。
. timeToLive - 在​节​点​被​逐​出​前​的​空​闲​时​间​(豪​秒​)。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. maxAge - 不​管​在​节​点​被​逐​出​前​的​空​闲​时​间​,对​象​存​在​于​缓​存​中​的​时​间​(毫​秒​)。​0 表​示​立​即​过​期​, -1 表示​无​限​制​。
. minTimeToLive - 允​许​节​点​被​考​虑​逐​出​前​可​生​存​的​最​长​时​间​。​0 表​示​此​功​能​被​禁​用​,也​是​缺​省​值​。

** FIFOAlgorithm - 先入先出 
  org.jboss.cache.eviction.FIFOPolicy 以​先​进​先​出​的​顺​序​控​制​节​点​的​逐​出​。​对​于​添​加​、​删​除​和​查找​(访​问​),这​个​策​略​保​证​了​不​变​的​顺​序​(O (1))。​它​有​下​列​的​可​配​置​属​性​:
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. minTimeToLive - 允​许​节​点​被​考​虑​逐​出​前​可​生​存​的​最​长​时​间​。​0 表​示​此​功​能​被​禁​用​,也​是​缺​省​值​。

** MRUAlgorithm - 最近最常使用的
  org.jboss.cache.eviction.MRUPolicy 将​基​于​最​近​最​常​使​用​的​算​法​来​控​制​节​点​的​逐​出​。​根​据​这​个策​略​, 最​近​最​常​使​用​的​节​点​将​最​先​被​逐​出​。​对​于​添​加​、​删​除​和​查​找​(访​问​),这​个​策​略​保​证​不​变​的​顺​序​(O(1))。​它​有​下​列​的​配​置​参​数​:
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. minTimeToLive - 允​许​节​点​被​考​虑​逐​出​前​可​生​存​的​最​长​时​间​。​0 表​示​此​功​能​被​禁​用​,也​是​缺​省​值​。

** LFUAlgorithm - 最少使用的 
  org.jboss.cache.eviction.LFUPolicy - 它​将​根​据​最​少​使​用​的​算​法​来​控​制​节​点​的​逐​出​。​根​据​这​个​策略​,最​少​使​用​的​节​点​将​首​先​被​逐​出​。​当​节​点​最​开​始​被​添​加​时​,节​点​使​用​计​数​从​ 1 开​始​。​每​次​被​访​问​时​,节​点使​用​计​数​加​ 1。​这​个​数​字​用​来​决​定​哪​些​节​点​是​最​少​被​使​用​的​。​LFU 也​是​一​个​排​序​的​算​法​。​底​层​的 EvictionQueue 实​现​和​算​法​根​据​节​点​计​数​器​进​行​升​序​排​列​。​对​于​添​加​、​删​除​和​搜​索​,这​个​类​保​证​不​变​的​顺​序(O (1))。​然​而​,对​于​给​定​的​处​理​ pass,当​任​何​数​目​的​节​点​被​添​加​或​从​队​列​删​除​时​,单​一​的​拟​线​性​(O(n * log n))操​作​被​用​来​以​ LFU 对​队​列​进​行​重​新​排​序​。​类​似​地​,如​果​任​何​节​点​被​删​除​或​逐​出​,单​一​的​线性​(O (n))清​除​操​作​对​于​清​理​队​列​是​必​需​的​。​LFU 有​下​列​的​配​置​参​数​:
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. minNodes - 这​个​ Region 所​允​许​的​最​小​节​点​数​目​。​这​个​值​决​定​每​次​ pass 时​队​列​里​所​剩​的​节​点​数​目​。​例如​,如​果​ minNodes 为​ 10,而​缓​存​增​长​至​ 100 个​节​点​,那​么​当​逐​出​定​时​器​(Eviction Timer)通​过​逐​出算​法​产​生​一​个​ pass 时​,这​个​缓​存​将​被​清​理​为​只​剩​下​ 10 个​最​常​有​的​节​点​。
. minTimeToLive - 允​许​节​点​被​考​虑​逐​出​前​可​生​存​的​最​长​时​间​。​0 表​示​此​功​能​被​禁​用​,也​是​缺​省​值​。

** ExpirationAlgorithm
  org.jboss.cache.eviction.ExpirationAlgorithm 是​一​个​基​于​绝​对​过​期​时​间​的​逐​出​策​略​。​过​期时​间​通​过​ org.jboss.cache.Node.put() 方​法​设​置​,它​使​用​字​符​串​键​ expiration 和​表​示​绝​对​时​间​的java.lang.Long 对​象​:始​自​ 1970 年​ 1 月​ 1 日​ UTC 午​夜​以​来​的​毫​秒​数​,和 java.lang.System .currentTimeMillis() 提​供​的​相​对​数​据​相​同​。

  对​于​添​加​、​删​除​, 这​个​策​略​保​证​了​不​变​的​顺​序​(O (1))。​在​内​部​,包​含​过​期​时​间​和​节​点​ FQN 的​已​排​序​的集​合​(T reeSet)将​被​存​储​,它​基​本​上​起​一​个​堆​(Heap)的​作​用​。

这​个​策​略​具​有​下​列​的​配​置​参​数​:
. expirationKeyName - 这​是​用​在​逐​出​算​法​里​的​节​点​键​名​。​缺​省​值​是​ expiration。
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​, -1 表​示​无​限​制​。

下​面​的​列​表​展​示​了​如​何​指​定​过​期​日​和​应​用​策​略​的​:
----
Cache cache = DefaultCacheFactory.createCache();
Fqn fqn1 = Fqn.fromString("/node/1");
Long future = new Long(System.currentTimeMillis() + 2000);
// sets the expiry time for a node
cache.getRoot().addChild(fqn1).put(ExpirationConfiguration.EXPIRATION_KEY,
future);
assertTrue(cache.getRoot().hasChild(fqn1));
Thread.sleep(5000);
// after 5 seconds, expiration completes
assertFalse(cache.getRoot().hasChild(fqn1));
----

请​注​意​,只​有​区​管​理​者​每​隔​ wakeUpIntervalSeconds 苏​醒​时​, 节​点​的​超​时​时​间​才​会​被​检​查​,所​以​逐​出可​能​会​在​指​定​的​时​间​之​后​几​秒​钟​才​发​生​。

** ElementSizeAlgorithm - 基于节点里键/值的个数的逐出 
  org.jboss.cache.eviction.ElementSizeAlgorithm 基​于​节​点​里​键​/值​的​个​数​控​制​逐​出​。​根​据​这个​策​略​, 最​近​最​常​使​用​的​节​点​将​最​先​被​逐​出​。​它​有​下​列​的​配​置​参​数​:
. maxNodes - 这​个​ region 里​允​许​的​节​点​的​最​大​数​目​。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. maxElementsPerNode - 这​是​节​点​被​选​中​逐​出​的​属​性​触​发​数​目​。​0 表​示​立​即​过​期​,-1 表​示​无​限​制​。
. minTimeToLive - 允​许​节​点​被​考​虑​逐​出​前​可​生​存​的​最​长​时​间​。​0 表​示​此​功​能​被​禁​用​,也​是​缺​省​值​


11 事务和并行性 
+++++++++++++

  JBoss Cache 是​一​个​线​程​安​全​的​缓​存​ API,它​使​用​自​己​的​控​制​并​行​访​问​的​高​效​机​制​。​它​使​用​革​新​的​多​重​版​本并​行​控​制​的​实​现​ MVCC 作​为​缺​省​的​锁​模​式​。​3.x 之​前​的​版​本​提​供​了​乐​观​和​悲​观​锁​模​式​,两​者​现​已​被​ MVCC 所替​代​的​。

* 11.1 多重版本并行控​制 ​( Multi-versioned Concurrency Control, MVCC)

MVCC 是​一​个​当​前​数​据​库​实​现​广​泛​使​用​以​控​制​对​共​享​数​据​的​快​速​、​安​全​的​访​问​的​锁​模​式​。

** 11.1.1 MVCC 概念

  MVCC 的​目​的​是​提​供​用​于​并​行​访​问​的​下​列​功​能​:
. 不​阻​塞​写​入​者​的​读​取​者
. 快​速​失​败​的​写​入​者

  并​通​过​当​前​写​入​者​的​数​据​版​本​和​复​制​来​实​现​。​这​个​理​论​是​读​取​者​继​续​读​取​共​享​数​据​,而​写​入​值​复​制​共​享​数​据、​增​大​版​本​ ID 并​在​验​证​了​该​版​本​仍​然​有​效​(也​就​是​另​外​一​个​写​入​者​还​没​有​修​改​只​给​状​态​)时​将​该​共​享​状​态回​写​。

  这​允​许​读​取​者​继​续​读​取​,同​时​阻​止​了​写​入​者​写​入​,而​可​重​复​的​读​模​式​通​过​允​许​读​取​者​读​取​旧​版​本​的​状​态​而​维持​。

** 11.1.2 MVCC 实现

  JBoss Cache 对​ MVCC 的​实​现​基​于​下​面​几​个​特​征​:
. 读​取​者​不​获​取​任​何​锁
. 对​于​单​个​写​入​者​而​言​,共​享​状​态​只​维​护​一​个​额​外​的​版​本​。
. 所​有​的​写​入​按​顺​序​发​生​,以​提​供​ fail-fast 模​式​。

  对​于​读​取​线​程​来​说​,JBoss Cache 的​ MVCC 实​现​具​有​极​高​的​性​能​,这​是​不​使​用​任​何​同​步​或​锁​来​实​现​的​。​对于​读​取​者​线​程​,MVCCLockingInterceptor 将​状​态​放​入​一​个​轻​量​级​的​容​器​对​象​里​,它​位​于​线​程​的InvocationContext(如​果​运​行​在​事​务​里​则​是​ T ransactionContext)。​对​于​该​状​态​的​所​有​随​后​的​操作​都​通​过​容​器​对​象​来​进​行​。​这​种​对​ Java 引​用​的​使​用​允​许​可​重​复​的​读​取​模​式​,即​使​实​际​的​状​态​同​时​发​生​了​变动​。

  从​另​外​一​方​面​来​说​,在​开​始​任​何​写​操​作​前​,写​线​程​需​要​获​得​一​个​锁​。​目​前​,我​们​使​用​锁​分​离​(LockStriping)来​提​高​缓​存​的​内​存​性​能​,而​共​享​锁​池​的​大​小​可​以​用​ locking 元​素​的​ concurrencyLevel 属​性进​行​调​优​。​详​情​请​参​考​『​第 12 章 配置参考​』​。​在​获​取​了​ FQN 上​的​排​他​锁​后​,就​像​读​取​者​线​程​一​样​,写​入者​线​程​将​状​态​放​入​容​器​里​,然​后​复​制​该​状​态​以​用​于​写​入​。​当​进​行​复​制​时​,对​原​始​版​本​的​引​用​仍​然​在​容​器​里​维护​(用​于​回​滚​)。​而​修​改​针​对​这​个​拷​贝​进​行​,当​写​入​完​成​时​这​个​拷​贝​最​终​被​写​入​到​数​据​结​构​里​。

这​样​,随​后​的​读​取​者​可​看​到​新​的​版​本​,而​现​有​的​读​取​者​仍​然​在​其​上​下​文​里​持​有​对​旧​版​本​的​引​用​。

当​写​入​者​在​一​段​时​间​内​无​法​获​得​写​锁​时​,T im eoutException 将​被​抛​出​。​这​个​锁​获​取​超​时​时​间​缺​省​为 10000 毫​秒​且​可​以​用​ locking 元​素​的​ lockAcquisitionT im eout 属​性​来​配​置​。​详​情​请​参​考『​第 12 章 配置参考​』​。

*** 11.1.2.1 隔离级别 

JBoss Cache 3.x 支​持​两​种​隔​离​级​别​:REPEAT ABLE_READ 和​ READ_COMMIT T ED,分​别​对​应​数​据​库​风格​的​隔​离​级​别​。​以​前​的​版​本​支​持​所​有​ 5 个​数​据​库​隔​离​级​别​,如​果​配​置​了​一​个​不​被​支​持​的​级​别​, 这​个​级​别​会​升级​或​降​级​到​最​近​的​被​支​持​的​级​别​。

REPEAT ABLE_READ 是​缺​省​的​隔​离​级​别​,它​维​护​与​以​前​的​ JBoss Cache 版​本​的​兼​容​性​。​而 READ_COMMITTED 提​供​了​一​种​稍​弱​的​隔​离​,它​相​比​ REPEAT ABLE_READ 具​有​很​大​的​性​能​优​势​。

*** 11.1.2.2 并​行​的​写​入​者​和​ Write-Skew

虽​然​ MVCC 强​制​写​入​者​获​取​写​锁​,有​一​种​称​为​ write skew 的​现​象​可​能​在​使​用​ REPEAT ABLE_READ 时​发​生。

  Figure ----

这​种​现​象​发​生​在​并​行​事​务​执​行​读​操​作​后​在​基​于​刚​才​读​取​的​值​进​行​写​操​作​。​既​然​读​包​含​保​留​对​事​务​上​下​文​里​的状​态​的​引​用​,随​后​的​写​会​消​除​原​来​的​读​取​的​状​态​,而​这​种​状​态​可​能​已​经​是​过​时​的​了​。

当​复​制​用​于​写​的​状​态​检​测​到​ write skew 时​,处​理​的​缺​省​行​为​是​抛​出​ DataVersioningException。​然​而, 在​多​数​应​用​程​序​里​,write skew 可​能​不​是​一​个​问​题​(例​如​,如​果​写​入​的​状​态​和​原​来​读​取​的​状​态​之​间​没​有​关系​)也​应​该​被​允​许​。​如​果​你​的​应​用​程​序​不​管​ write skew,通​过​设​置​ writeSkewCheck 为​ false, 你​可​以允​许​它​们​发​生​。​详​情​请​参​考​『​第 12 章 配置参考​』​。

请​注​意​,因​为​线​程​总​是​会​处​理​已​提​交​的​状​态​,在​使​用​ READ_COMMIT T ED 时​ Write Skew 不​会​发​生​。

** 11.1.3 配置锁 

用​ <locking /> 标​签​配​置​ MVCC:
---
<locking
isolationLevel="REPEATABLE_READ"
lockAcquisitionTimeout="10234"
nodeLockingScheme="mvcc"
writeSkewCheck="false"
concurrencyLevel="1000" />
---
. nodeLockingScheme - 所​使​用​的​节​点​锁​模​式​。​缺​省​值​为​ MVCC,也​可​以​使​用​已​取​消​的​模​式​如 pessimistic 或​ optimistic,但​我​们​不​鼓​励​这​么​做​。
. isolationLevel - 事​务​隔​离​级​别​。​如​果​未​指​定​,缺​省​值​为​ REPEAT ABLE_READ。
. writeSkewCheck - 缺​省​值​为​ true。
. concurrencyLevel - 缺​省​值​为​ 500。
. lockAcquisitionT im eout - 使​用​ MVCC 时​只​适​用​于​写​入​者​。​缺​省​值​为​ 10000。

** 11.1.4 悲观和乐观锁模式 
从​ JBoss Cache 3.x 开​始​,悲​观​和​乐​观​锁​模​式​被​『​第 11.1.1 节 “多​重​版​本​并​行​控​制​(Multi-versioned Concurrency Control,MVCC)”』​所​替​代​。​我​们​推​荐​现​有​的​应​用​程​序​移​除​旧​的​锁​模​式​, 因​为​在​以​后​的​版​本里​, 相​关​支​持​将​最​终​被​取​消​。

* 11.2. 对 JTA 的支持

  对​ JBoss Cache 进​行​配​置​,它​就​可​以​使​用​和​参​与​ JT A 兼​容​的​事​务​。​或​者​,如​果​禁​用​了​事​务​支​持​,这​和​使​用 JDBC 调​用​里​的​自​动​提​交​是​相​等​的​,这​样​修​改​将​在​每​次​变​动​后​进​行​复​制​(如​果​启​用​了​复​制​)。

JBoss Cache 对​每​次​转​入​调​用​所​做​的​是​:
. 获​取​和​线​程​相​关​联​的​ javax.transaction.T ransaction
. 向​事​务​管​理​者​注​册​(如​果​未​注​册​)javax.transaction.Synchronization,使​其​在​事​务​提​交​或回​滚​时​收​到​通​知​。

为​了​实​现​这​一​点​,我​们​需​要​为​缓​存​提​供​一​个​对​环​境​的​ javax.transaction.TransactionManager 的引​用​。​这​通​常​是​通​过​用​ TransactionManagerLookup 接​口​实​现​的​类​名​配​置​缓​存​来​完​成​的​。​当​缓​存​启​动时​, 它​会​创​建​该​类​的​一​个​实​例​并​调​用​它​的​ getTransactionManager() 方​法​,这​个​方​法​返​回​对 TransactionManager 的​引​用​。

  Figure 3-----

JBoss Cache 带​有​ JBossTransactionManagerLookup 和 GenericTransactionManagerLookup。​JBossT ransactionManagerLookup 能​够​绑​定​到​运​行​的 JBoss 应​用​服​务​器​并​获​取​ TransactionManager,而​GenericTransactionManagerLookup 可​以绑​定​大​多​数​流​行​的​ Java EE 应​用​服​务​器​且​提​供​相​同​的​功​能​。​JBoss Cache 也​提​供​一​个​傀​儡​实​现DummyTransactionManagerLookup,它​可​以​用​于​独​立​的​ JBoss Cache 应​用​程​序​,也​可​以​用​于​在​ Java EE 应​用​服​务​器​之​外​运​行​的​单​元​测​试​。​作​为​傀​儡​实​现​,它​只​是​用​于​演​示​和​测​试​目​的​, 我​们​不​推​荐​将​其​用​于​产品​环​境​。

另​外​一​个​配​置​ TransactionManagerLookup 的​方​法​是​在​程​序​里​注​入​一​个​ TransactionManager 引用​到​ Configuration 对​象​的​ RuntimeConfig 元​素​里​:
---
TransactionManager tm = getTransactionManager(); // magic method
cache.getConfiguration().getRuntimeConfig().setTransactionManager(tm);
---
当​ Configuration 是​通​过​某​种​已​经​具​有​对​ TransactionManager 的​引​用​的​ IOC 容​器​构​建​时​, 注​入 TransactionManager 是​我​们​所​推​荐​的​方​法​。

当​事​务​提​交​时​,我​们​初​始​化​一​个​单​阶​段​或​两​阶​段​的​提​交​协​议​。​详​情​请​参​考​『​第 8.1.2.1 节 “复​制​性​缓​存​和​事​务”』​。

