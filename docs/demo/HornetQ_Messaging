消息系统允许我们以松耦合的方式连接不同的系统在一起，并具有一定可靠性。Java消息服务（JMS）提供商使用事务性的系统，能够原子性的提交或回滚的变化。不同于基于远程过程调用（RPC）模式的系统，消息系统主要使用异步消息传递模式，消息请求和响应之间没有紧密关系。大多数消息系统也支持请求-响应模式，但是这不是一个消息系统主要的功能。

HornetQ是一个多协议，由Red Hat开发的异步消息系统。HornetQ提供高可用性（HA），在一个服务器出现故障的情况下客户端自动切换到其他服务器，保证消息的可靠性。HornetQ还支持灵活的基于负载均衡消息的集群解决方案。

HornetQ的使用Acceptors和Connectors的概念作为一个消息系统的重要组成部分。Acceptors和Connectors分别决定接收进来连接的方式及使连接​​到服务器（其它HornetQ的服务器或JMS客户端）。换句话说，Acceptors决定​​HornetQ服务器的监听地址。另一方面，Connectors用于与HornetQ服务器通信，因此Connectors被客户端或其他HornetQ服务器使用。HornetQ的服务器使用BROADCAST GROUPS来广播自己的连接信息到其他监听广播消息（DISCOVERY GROUP）的HornetQ服务器，当JMS客户端通过JNDI查找一个ConnectionFactory并发送消息HornetQ的目的地，ConnectionFactory使用Connectors。

HornetQ提供两种类型的Acceptors和Connectors：invm和netty。如果连接在同一个JVM中invm更有效，netty用来处理不同JVM之间或不同物理机器之间JVM连接。只有Connectors和Acceptors配置的类型相同连接才能够成功建立（相同的协议，如果使用netty则相同的主机地址和端口号）。

在集群的概念中，JMS消息可以认为是集群节点的状态。由于JMS异步FIRE AND FORGET的特性，消息往往积聚在服务器上，并逐渐在新的事务中被消费，这些消息往往被设置为是持久化的，直到事务成功提交才从数据存储中删除。当一个JBoss实例失败，它可能有较多的为被处理的持久化JMS消息，这就需要一个适当的JMS服务器集群解决方案将这些消息容错复制到其他节点，让他们可以尽快在另一个节点上被消费者消费。

在HornetQ高可用性（HA）集群的配置中多个HornetQ的服务器可能会被联系在一起组成活着的-备份的组，每个活着的服务器可以有1个或多个备份服务器，备份服务器是不被操作，直到发生故障转移。但是有一个选择的备份服务器处于被动模式状态，等待接管活着服务器的工作。

JBoss 7/WildFly中HornetQ支持两种高可用性（HA）模式：
1. 共享存储：HornetQ可以使用一个高性能的共享文件系统，活着的和备份的服务器组之间共享相同的整个数据目录，这包括分页目录，日志目录，大消息，和绑定的日志，当发生故障转移时备份服务器接管，它会加载共享的文件系统中的持久化消息存储。

2. 消息复制：当不使用共享存储时，HornetQ现在支持活着的和备份的服务器组之间基于内存进行复制。在这种情况下，消息的复制是通过网络流量实现的。只要在两个服务器在同一集群且具有相同的群集的用户名和密码，两个服务器之间的所有的状态都能被被复制。只有活着的服务器接收到持久化的的消息才会被复制到备份服务器，所以重要的是要记住，只有持久化才能实现消息复制，达到高可用性（HA），否则不具有高可用性（HA）。



